
lf.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000008da  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  000008da  0000096e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000068  00800068  00800068  00000976  2**0
                  ALLOC
  3 .debug_aranges 00000100  00000000  00000000  00000976  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000441  00000000  00000000  00000a76  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000aba  00000000  00000000  00000eb7  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005c8  00000000  00000000  00001971  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000af0  00000000  00000000  00001f39  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000240  00000000  00000000  00002a2c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000041a  00000000  00000000  00002c6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000231  00000000  00000000  00003086  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 6f 01 	jmp	0x2de	; 0x2de <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 63 01 	jmp	0x2c6	; 0x2c6 <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 dd 01 	jmp	0x3ba	; 0x3ba <__vector_19>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea ed       	ldi	r30, 0xDA	; 218
  68:	f8 e0       	ldi	r31, 0x08	; 8
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a8 36       	cpi	r26, 0x68	; 104
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a8 e6       	ldi	r26, 0x68	; 104
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 3d       	cpi	r26, 0xD0	; 208
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 6b 04 	jmp	0x8d6	; 0x8d6 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:


int main()
{

	pwm_init();
  92:	0e 94 ff 00 	call	0x1fe	; 0x1fe <pwm_init>
	uart_init(259);
  96:	83 e0       	ldi	r24, 0x03	; 3
  98:	91 e0       	ldi	r25, 0x01	; 1
  9a:	0e 94 b1 01 	call	0x362	; 0x362 <uart_init>
	QTR_init();
  9e:	0e 94 2a 01 	call	0x254	; 0x254 <QTR_init>
	sch_init();
  a2:	0e 94 70 02 	call	0x4e0	; 0x4e0 <sch_init>
	pid_init();
  a6:	0e 94 9a 02 	call	0x534	; 0x534 <pid_init>

	


	sch_setTask(alg,0,1);
  aa:	87 e7       	ldi	r24, 0x77	; 119
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	60 e0       	ldi	r22, 0x00	; 0
  b0:	41 e0       	ldi	r20, 0x01	; 1
  b2:	50 e0       	ldi	r21, 0x00	; 0
  b4:	0e 94 10 02 	call	0x420	; 0x420 <sch_setTask>
	sch_setTask(communication_handler_task,1,20);
  b8:	88 ee       	ldi	r24, 0xE8	; 232
  ba:	93 e0       	ldi	r25, 0x03	; 3
  bc:	61 e0       	ldi	r22, 0x01	; 1
  be:	44 e1       	ldi	r20, 0x14	; 20
  c0:	50 e0       	ldi	r21, 0x00	; 0
  c2:	0e 94 10 02 	call	0x420	; 0x420 <sch_setTask>
	sch_setTaskStatus(TASK_2,ENABLE_TASK);
  c6:	82 e0       	ldi	r24, 0x02	; 2
  c8:	61 e0       	ldi	r22, 0x01	; 1
  ca:	0e 94 fe 01 	call	0x3fc	; 0x3fc <sch_setTaskStatus>
	pid_setpoint(0);
  ce:	80 e0       	ldi	r24, 0x00	; 0
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	0e 94 9b 02 	call	0x536	; 0x536 <pid_setpoint>
	pid_set_consts(7000,0,15000);
  d6:	88 e5       	ldi	r24, 0x58	; 88
  d8:	9b e1       	ldi	r25, 0x1B	; 27
  da:	60 e0       	ldi	r22, 0x00	; 0
  dc:	70 e0       	ldi	r23, 0x00	; 0
  de:	48 e9       	ldi	r20, 0x98	; 152
  e0:	5a e3       	ldi	r21, 0x3A	; 58
  e2:	0e 94 a0 02 	call	0x540	; 0x540 <pid_set_consts>

//	pwm_setMotors(MOTOR_BACKWARD,50,MOTOR_BACKWARD,50);
	
	sei(); 	
  e6:	78 94       	sei
	

	while(1)
	{

	sch_main();
  e8:	0e 94 2b 02 	call	0x456	; 0x456 <sch_main>
  ec:	fd cf       	rjmp	.-6      	; 0xe8 <main+0x56>

000000ee <alg>:
void alg()
{
	char pos =0;
	short mask;
	//center
	sensor_value = QTR_compute();
  ee:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <QTR_compute>
  f2:	80 93 69 00 	sts	0x0069, r24
	
	mask = 1 << last_offset;
  f6:	50 91 61 00 	lds	r21, 0x0061
  fa:	61 e0       	ldi	r22, 0x01	; 1
  fc:	70 e0       	ldi	r23, 0x00	; 0
  fe:	05 2e       	mov	r0, r21
 100:	02 c0       	rjmp	.+4      	; 0x106 <alg+0x18>
 102:	66 0f       	add	r22, r22
 104:	77 1f       	adc	r23, r23
 106:	0a 94       	dec	r0
 108:	e2 f7       	brpl	.-8      	; 0x102 <alg+0x14>
 10a:	20 e0       	ldi	r18, 0x00	; 0
 10c:	30 e0       	ldi	r19, 0x00	; 0

	do
	{
		if (sensor_value & (mask << pos))
 10e:	e8 2f       	mov	r30, r24
 110:	f0 e0       	ldi	r31, 0x00	; 0
	char pos =0;
	short mask;
	//center
	sensor_value = QTR_compute();
	
	mask = 1 << last_offset;
 112:	42 2f       	mov	r20, r18

	do
	{
		if (sensor_value & (mask << pos))
 114:	cb 01       	movw	r24, r22
 116:	02 2e       	mov	r0, r18
 118:	02 c0       	rjmp	.+4      	; 0x11e <alg+0x30>
 11a:	88 0f       	add	r24, r24
 11c:	99 1f       	adc	r25, r25
 11e:	0a 94       	dec	r0
 120:	e2 f7       	brpl	.-8      	; 0x11a <alg+0x2c>
 122:	8e 23       	and	r24, r30
 124:	9f 23       	and	r25, r31
 126:	89 2b       	or	r24, r25
 128:	19 f0       	breq	.+6      	; 0x130 <alg+0x42>
		{
			offset = last_offset + pos;		
 12a:	82 2f       	mov	r24, r18
 12c:	85 0f       	add	r24, r21
 12e:	0d c0       	rjmp	.+26     	; 0x14a <alg+0x5c>
			break;
		}
		else if (sensor_value & (mask >> pos))
 130:	cb 01       	movw	r24, r22
 132:	02 2e       	mov	r0, r18
 134:	02 c0       	rjmp	.+4      	; 0x13a <alg+0x4c>
 136:	95 95       	asr	r25
 138:	87 95       	ror	r24
 13a:	0a 94       	dec	r0
 13c:	e2 f7       	brpl	.-8      	; 0x136 <alg+0x48>
 13e:	8e 23       	and	r24, r30
 140:	9f 23       	and	r25, r31
 142:	89 2b       	or	r24, r25
 144:	29 f0       	breq	.+10     	; 0x150 <alg+0x62>
		{
			offset = last_offset - pos;		
 146:	85 2f       	mov	r24, r21
 148:	82 1b       	sub	r24, r18
 14a:	80 93 60 00 	sts	0x0060, r24
 14e:	06 c0       	rjmp	.+12     	; 0x15c <alg+0x6e>
			break;
 150:	4f 5f       	subi	r20, 0xFF	; 255
 152:	2f 5f       	subi	r18, 0xFF	; 255
 154:	3f 4f       	sbci	r19, 0xFF	; 255
		else
		{
			pos++;
		}
		
	}while (pos<8);	
 156:	28 30       	cpi	r18, 0x08	; 8
 158:	31 05       	cpc	r19, r1
 15a:	d9 f6       	brne	.-74     	; 0x112 <alg+0x24>
	
	if (8 == pos)
 15c:	48 30       	cpi	r20, 0x08	; 8
 15e:	11 f4       	brne	.+4      	; 0x164 <alg+0x76>
	{
		offset = last_offset;
 160:	50 93 60 00 	sts	0x0060, r21
	}
	
	last_offset = offset;
 164:	20 91 60 00 	lds	r18, 0x0060
 168:	20 93 61 00 	sts	0x0061, r18
	output_pid = pid_calculate((int8_t)4 - offset);
 16c:	33 27       	eor	r19, r19
 16e:	27 fd       	sbrc	r18, 7
 170:	30 95       	com	r19
 172:	84 e0       	ldi	r24, 0x04	; 4
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	82 1b       	sub	r24, r18
 178:	93 0b       	sbc	r25, r19
 17a:	0e 94 ad 02 	call	0x55a	; 0x55a <pid_calculate>
 17e:	80 93 6b 00 	sts	0x006B, r24


	if(output_pid > 0) // increase left motor speed
 182:	18 16       	cp	r1, r24
 184:	c4 f4       	brge	.+48     	; 0x1b6 <alg+0xc8>
	{
			left_speed = speed + output_pid;
 186:	30 91 62 00 	lds	r19, 0x0062
 18a:	28 2f       	mov	r18, r24
 18c:	23 0f       	add	r18, r19
 18e:	20 93 6c 00 	sts	0x006C, r18
			if(output_pid > 100){
 192:	85 36       	cpi	r24, 0x65	; 101
 194:	1c f0       	brlt	.+6      	; 0x19c <alg+0xae>
				pwm_setMotors(MOTOR_BACKWARD,left_speed,MOTOR_FORWARD,left_speed);
 196:	82 e0       	ldi	r24, 0x02	; 2
 198:	62 2f       	mov	r22, r18
 19a:	0b c0       	rjmp	.+22     	; 0x1b2 <alg+0xc4>
			}
			else{
					
				pwm_setMotors(MOTOR_FORWARD,speed - (left_speed * 40/100),MOTOR_FORWARD,left_speed);
 19c:	88 e2       	ldi	r24, 0x28	; 40
 19e:	28 9f       	mul	r18, r24
 1a0:	c0 01       	movw	r24, r0
 1a2:	11 24       	eor	r1, r1
 1a4:	6c e9       	ldi	r22, 0x9C	; 156
 1a6:	7f ef       	ldi	r23, 0xFF	; 255
 1a8:	0e 94 36 04 	call	0x86c	; 0x86c <__divmodhi4>
 1ac:	36 0f       	add	r19, r22
 1ae:	81 e0       	ldi	r24, 0x01	; 1
 1b0:	63 2f       	mov	r22, r19
 1b2:	41 e0       	ldi	r20, 0x01	; 1
 1b4:	21 c0       	rjmp	.+66     	; 0x1f8 <alg+0x10a>
 1b6:	30 91 62 00 	lds	r19, 0x0062
			}
	}
	else if(output_pid < 0) //right motor
 1ba:	88 23       	and	r24, r24
 1bc:	c9 f0       	breq	.+50     	; 0x1f0 <alg+0x102>
	{
		output_pid *= (-1);
 1be:	81 95       	neg	r24
 1c0:	80 93 6b 00 	sts	0x006B, r24

		right_speed = speed + output_pid;
 1c4:	28 2f       	mov	r18, r24
 1c6:	23 0f       	add	r18, r19
 1c8:	20 93 6d 00 	sts	0x006D, r18

		if(output_pid > 80){
 1cc:	81 35       	cpi	r24, 0x51	; 81
 1ce:	24 f0       	brlt	.+8      	; 0x1d8 <alg+0xea>
				pwm_setMotors(MOTOR_FORWARD,right_speed,MOTOR_BACKWARD,right_speed);
 1d0:	81 e0       	ldi	r24, 0x01	; 1
 1d2:	62 2f       	mov	r22, r18
 1d4:	42 e0       	ldi	r20, 0x02	; 2
 1d6:	10 c0       	rjmp	.+32     	; 0x1f8 <alg+0x10a>
		}
		else{
				pwm_setMotors(MOTOR_FORWARD,right_speed,MOTOR_FORWARD,speed- (right_speed * 40/100));
 1d8:	88 e2       	ldi	r24, 0x28	; 40
 1da:	28 9f       	mul	r18, r24
 1dc:	c0 01       	movw	r24, r0
 1de:	11 24       	eor	r1, r1
 1e0:	6c e9       	ldi	r22, 0x9C	; 156
 1e2:	7f ef       	ldi	r23, 0xFF	; 255
 1e4:	0e 94 36 04 	call	0x86c	; 0x86c <__divmodhi4>
 1e8:	36 0f       	add	r19, r22
 1ea:	81 e0       	ldi	r24, 0x01	; 1
 1ec:	62 2f       	mov	r22, r18
 1ee:	02 c0       	rjmp	.+4      	; 0x1f4 <alg+0x106>
		}

	
	}
	else{
		pwm_setMotors(MOTOR_FORWARD,speed,MOTOR_FORWARD,speed);
 1f0:	81 e0       	ldi	r24, 0x01	; 1
 1f2:	63 2f       	mov	r22, r19
 1f4:	41 e0       	ldi	r20, 0x01	; 1
 1f6:	23 2f       	mov	r18, r19
 1f8:	0e 94 0d 01 	call	0x21a	; 0x21a <pwm_setMotors>
 1fc:	08 95       	ret

000001fe <pwm_init>:
#include "pwm.h"

void pwm_init(){

	MOTORS_SET_TOP;
 1fe:	80 e4       	ldi	r24, 0x40	; 64
 200:	91 e0       	ldi	r25, 0x01	; 1
 202:	97 bd       	out	0x27, r25	; 39
 204:	86 bd       	out	0x26, r24	; 38
	MOTORS_INIT_TCCR1A;
 206:	8f b5       	in	r24, 0x2f	; 47
 208:	81 6a       	ori	r24, 0xA1	; 161
 20a:	8f bd       	out	0x2f, r24	; 47
	MOTORS_INIT_TCCR1B;
 20c:	8e b5       	in	r24, 0x2e	; 46
 20e:	82 60       	ori	r24, 0x02	; 2
 210:	8e bd       	out	0x2e, r24	; 46

	MOTOR_DDR_SETUP;	
 212:	81 b3       	in	r24, 0x11	; 17
 214:	88 67       	ori	r24, 0x78	; 120
 216:	81 bb       	out	0x11, r24	; 17

}
 218:	08 95       	ret

0000021a <pwm_setMotors>:


void pwm_setMotors(uint8_t right_dir,uint8_t right_val, uint8_t left_dir, uint8_t left_val){
 21a:	70 e0       	ldi	r23, 0x00	; 0
	
	if(right_dir == MOTOR_FORWARD){
 21c:	81 30       	cpi	r24, 0x01	; 1
 21e:	41 f4       	brne	.+16     	; 0x230 <pwm_setMotors+0x16>
		SET_RIGHT_FORWARD;
 220:	93 9a       	sbi	0x12, 3	; 18
		SET_RIGHT_FW_PWM(right_val);
 222:	8f ef       	ldi	r24, 0xFF	; 255
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	86 1b       	sub	r24, r22
 228:	97 0b       	sbc	r25, r23
 22a:	99 bd       	out	0x29, r25	; 41
 22c:	88 bd       	out	0x28, r24	; 40
 22e:	03 c0       	rjmp	.+6      	; 0x236 <pwm_setMotors+0x1c>
	}
	else{
		SET_RIGHT_BACKWARD;
 230:	93 98       	cbi	0x12, 3	; 18
		SET_RIGHT_BK_PWM(right_val);
 232:	79 bd       	out	0x29, r23	; 41
 234:	68 bd       	out	0x28, r22	; 40
 236:	30 e0       	ldi	r19, 0x00	; 0
	}

	if(left_dir == MOTOR_FORWARD){
 238:	41 30       	cpi	r20, 0x01	; 1
 23a:	41 f4       	brne	.+16     	; 0x24c <pwm_setMotors+0x32>
		SET_LEFT_FORWARD;
 23c:	96 9a       	sbi	0x12, 6	; 18
		SET_LEFT_FW_PWM(left_val);
 23e:	8f ef       	ldi	r24, 0xFF	; 255
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	82 1b       	sub	r24, r18
 244:	93 0b       	sbc	r25, r19
 246:	9b bd       	out	0x2b, r25	; 43
 248:	8a bd       	out	0x2a, r24	; 42
 24a:	08 95       	ret
	}
	else{
		SET_LEFT_BACKWARD;
 24c:	96 98       	cbi	0x12, 6	; 18
		SET_LEFT_BK_PWM(left_val);
 24e:	3b bd       	out	0x2b, r19	; 43
 250:	2a bd       	out	0x2a, r18	; 42
 252:	08 95       	ret

00000254 <QTR_init>:


void QTR_init()
{

	DDRA = 0x0;
 254:	1a ba       	out	0x1a, r1	; 26
	DDRB &= 0xFC;
 256:	87 b3       	in	r24, 0x17	; 23
 258:	8c 7f       	andi	r24, 0xFC	; 252
 25a:	87 bb       	out	0x17, r24	; 23

	PORTA = 0xFF;
 25c:	8f ef       	ldi	r24, 0xFF	; 255
 25e:	8b bb       	out	0x1b, r24	; 27
	PORTB = 0x3;
 260:	83 e0       	ldi	r24, 0x03	; 3
 262:	88 bb       	out	0x18, r24	; 24

}
 264:	08 95       	ret

00000266 <QTR_read>:

void QTR_read(uint8_t *values)
{
 266:	fc 01       	movw	r30, r24

	values[0] = (PINB >> S1) & 0x1;
 268:	86 b3       	in	r24, 0x16	; 22
 26a:	82 95       	swap	r24
 26c:	86 95       	lsr	r24
 26e:	81 70       	andi	r24, 0x01	; 1
 270:	80 83       	st	Z, r24
    values[1] = (PINC >> S2) & 0x1;
 272:	83 b3       	in	r24, 0x13	; 19
 274:	81 70       	andi	r24, 0x01	; 1
 276:	81 83       	std	Z+1, r24	; 0x01
    values[2] = (PINC >> S3) & 0x1;
 278:	83 b3       	in	r24, 0x13	; 19
 27a:	86 95       	lsr	r24
 27c:	81 70       	andi	r24, 0x01	; 1
 27e:	82 83       	std	Z+2, r24	; 0x02
    values[3] = (PIND >> S4) & 0x1;
 280:	80 b3       	in	r24, 0x10	; 16
 282:	86 95       	lsr	r24
 284:	86 95       	lsr	r24
 286:	86 95       	lsr	r24
 288:	81 70       	andi	r24, 0x01	; 1
 28a:	83 83       	std	Z+3, r24	; 0x03
    values[4] = (PIND >> S5) & 0x1;
 28c:	80 b3       	in	r24, 0x10	; 16
 28e:	88 1f       	adc	r24, r24
 290:	88 27       	eor	r24, r24
 292:	88 1f       	adc	r24, r24
 294:	84 83       	std	Z+4, r24	; 0x04
    values[5] = (PINB >> S6) & 0x1;
 296:	86 b3       	in	r24, 0x16	; 22
 298:	82 95       	swap	r24
 29a:	81 70       	andi	r24, 0x01	; 1
 29c:	85 83       	std	Z+5, r24	; 0x05
    values[6] = (PINB >> S7) & 0x1;
 29e:	86 b3       	in	r24, 0x16	; 22
 2a0:	86 95       	lsr	r24
 2a2:	86 95       	lsr	r24
 2a4:	86 95       	lsr	r24
 2a6:	81 70       	andi	r24, 0x01	; 1
 2a8:	86 83       	std	Z+6, r24	; 0x06
    values[7] = (PINB >> S8) & 0x1;
 2aa:	86 b3       	in	r24, 0x16	; 22
 2ac:	86 95       	lsr	r24
 2ae:	86 95       	lsr	r24
 2b0:	81 70       	andi	r24, 0x01	; 1
 2b2:	87 83       	std	Z+7, r24	; 0x07

}
 2b4:	08 95       	ret

000002b6 <QTR_compute>:

uint8_t QTR_compute()
{
	
	uint8_t value = 0;
	value = (PINA & 0xFC) << 1;
 2b6:	99 b3       	in	r25, 0x19	; 25
	value |= ( (PINB >> 1) & 0x1);
 2b8:	86 b3       	in	r24, 0x16	; 22
 2ba:	86 95       	lsr	r24
 2bc:	81 70       	andi	r24, 0x01	; 1
 2be:	9c 7f       	andi	r25, 0xFC	; 252
 2c0:	99 0f       	add	r25, r25

	return value;
}
 2c2:	89 2b       	or	r24, r25
 2c4:	08 95       	ret

000002c6 <__vector_13>:
uint8_t uart_rx_buffer[UART_RX_MAX];
uint8_t uart_rx_index;


ISR(USART_TXC_vect)
{
 2c6:	1f 92       	push	r1
 2c8:	0f 92       	push	r0
 2ca:	0f b6       	in	r0, 0x3f	; 63
 2cc:	0f 92       	push	r0
 2ce:	11 24       	eor	r1, r1
	uart_tx_state = UART_IDLE;
 2d0:	10 92 7d 00 	sts	0x007D, r1
}
 2d4:	0f 90       	pop	r0
 2d6:	0f be       	out	0x3f, r0	; 63
 2d8:	0f 90       	pop	r0
 2da:	1f 90       	pop	r1
 2dc:	18 95       	reti

000002de <__vector_11>:

ISR(USART_RXC_vect)
{
 2de:	1f 92       	push	r1
 2e0:	0f 92       	push	r0
 2e2:	0f b6       	in	r0, 0x3f	; 63
 2e4:	0f 92       	push	r0
 2e6:	11 24       	eor	r1, r1
 2e8:	8f 93       	push	r24
 2ea:	9f 93       	push	r25
 2ec:	ef 93       	push	r30
 2ee:	ff 93       	push	r31
	uart_rx_state = UART_RECEIVE;
 2f0:	82 e0       	ldi	r24, 0x02	; 2
 2f2:	80 93 7f 00 	sts	0x007F, r24
	uart_rx_buffer[uart_rx_index++] = UDR;
 2f6:	80 91 7e 00 	lds	r24, 0x007E
 2fa:	9c b1       	in	r25, 0x0c	; 12
 2fc:	e8 2f       	mov	r30, r24
 2fe:	f0 e0       	ldi	r31, 0x00	; 0
 300:	e0 58       	subi	r30, 0x80	; 128
 302:	ff 4f       	sbci	r31, 0xFF	; 255
 304:	90 83       	st	Z, r25
 306:	8f 5f       	subi	r24, 0xFF	; 255
 308:	80 93 7e 00 	sts	0x007E, r24

	if(uart_rx_index >= UART_RX_MAX)
 30c:	84 31       	cpi	r24, 0x14	; 20
 30e:	10 f0       	brcs	.+4      	; 0x314 <__vector_11+0x36>
	{
		uart_rx_index = 0;
 310:	10 92 7e 00 	sts	0x007E, r1
	}
}
 314:	ff 91       	pop	r31
 316:	ef 91       	pop	r30
 318:	9f 91       	pop	r25
 31a:	8f 91       	pop	r24
 31c:	0f 90       	pop	r0
 31e:	0f be       	out	0x3f, r0	; 63
 320:	0f 90       	pop	r0
 322:	1f 90       	pop	r1
 324:	18 95       	reti

00000326 <uart_rx_flush>:

uint8_t uart_rx_flush(uint8_t *buffer)
{
 326:	ac 01       	movw	r20, r24
	cli();
 328:	f8 94       	cli
	uint8_t uart_available = 0;
	if(uart_rx_state == UART_RECEIVE)
 32a:	80 91 7f 00 	lds	r24, 0x007F
 32e:	82 30       	cpi	r24, 0x02	; 2
 330:	11 f0       	breq	.+4      	; 0x336 <uart_rx_flush+0x10>
 332:	80 e0       	ldi	r24, 0x00	; 0
 334:	14 c0       	rjmp	.+40     	; 0x35e <uart_rx_flush+0x38>
 336:	20 e0       	ldi	r18, 0x00	; 0
 338:	0a c0       	rjmp	.+20     	; 0x34e <uart_rx_flush+0x28>
	{
		for(uint8_t idx = 0; idx < uart_rx_index; idx++)
		{
			*(buffer + idx) = *(uart_rx_buffer + idx);
 33a:	e2 2f       	mov	r30, r18
 33c:	f0 e0       	ldi	r31, 0x00	; 0
 33e:	da 01       	movw	r26, r20
 340:	ae 0f       	add	r26, r30
 342:	bf 1f       	adc	r27, r31
 344:	e0 58       	subi	r30, 0x80	; 128
 346:	ff 4f       	sbci	r31, 0xFF	; 255
 348:	80 81       	ld	r24, Z
 34a:	8c 93       	st	X, r24
{
	cli();
	uint8_t uart_available = 0;
	if(uart_rx_state == UART_RECEIVE)
	{
		for(uint8_t idx = 0; idx < uart_rx_index; idx++)
 34c:	2f 5f       	subi	r18, 0xFF	; 255
 34e:	80 91 7e 00 	lds	r24, 0x007E
 352:	28 17       	cp	r18, r24
 354:	90 f3       	brcs	.-28     	; 0x33a <uart_rx_flush+0x14>
		{
			*(buffer + idx) = *(uart_rx_buffer + idx);

		}
		uart_available = uart_rx_index;
		uart_rx_index = 0;
 356:	10 92 7e 00 	sts	0x007E, r1
		uart_rx_state = UART_IDLE;
 35a:	10 92 7f 00 	sts	0x007F, r1
	}
	sei();
 35e:	78 94       	sei

	return uart_available;
}
 360:	08 95       	ret

00000362 <uart_init>:


void uart_init(uint16_t baud) // 1Mhz baud, 8 data, 1 stop, none parity
{

	uart_rx_index = 0;
 362:	10 92 7e 00 	sts	0x007E, r1
	uart_tx_state = UART_IDLE;
 366:	10 92 7d 00 	sts	0x007D, r1
	uart_rx_state = UART_IDLE;
 36a:	10 92 7f 00 	sts	0x007F, r1

    UCSRA  = (0x1 << U2X);
 36e:	82 e0       	ldi	r24, 0x02	; 2
 370:	8b b9       	out	0x0b, r24	; 11
	UCSRB  = (0x1 << TXEN) | (0x1 << RXEN) | (0x1 << RXCIE) | (0x1 << TXCIE);
 372:	88 ed       	ldi	r24, 0xD8	; 216
 374:	8a b9       	out	0x0a, r24	; 10
	UCSRC  = (0x1 << URSEL) | (0x1 << UCSZ0) | (0x1 << UCSZ1);
 376:	86 e8       	ldi	r24, 0x86	; 134
 378:	80 bd       	out	0x20, r24	; 32
	UBRRL =  3;
 37a:	83 e0       	ldi	r24, 0x03	; 3
 37c:	89 b9       	out	0x09, r24	; 9
	UBRRH =  1;
 37e:	81 e0       	ldi	r24, 0x01	; 1
 380:	80 bd       	out	0x20, r24	; 32


	sei();
 382:	78 94       	sei
}
 384:	08 95       	ret

00000386 <uart_sendByte>:

void uart_sendByte(uint8_t byte)
{
	UDR = byte;
 386:	8c b9       	out	0x0c, r24	; 12

	while( ( (UCSRA >> UDRE) & 0x1) == 0x0 )
 388:	5d 9b       	sbis	0x0b, 5	; 11
 38a:	fe cf       	rjmp	.-4      	; 0x388 <uart_sendByte+0x2>
	{
		
	}
}
 38c:	08 95       	ret

0000038e <uart_sendByteNotBlocking>:



uint8_t uart_sendByteNotBlocking(uint8_t byte)
{
 38e:	98 2f       	mov	r25, r24
	uint8_t retValue = UART_NOK;
	if( uart_tx_state == UART_IDLE)
 390:	80 91 7d 00 	lds	r24, 0x007D
 394:	88 23       	and	r24, r24
 396:	11 f0       	breq	.+4      	; 0x39c <uart_sendByteNotBlocking+0xe>
 398:	85 e0       	ldi	r24, 0x05	; 5
 39a:	08 95       	ret
	{
		retValue = UART_OK;
		
		UDR = byte;
 39c:	9c b9       	out	0x0c, r25	; 12
 39e:	84 e0       	ldi	r24, 0x04	; 4

	}

	return retValue;
}
 3a0:	08 95       	ret

000003a2 <timer_init>:
		uint8_t tccr0_reg = BIT8_REG_RESET;
		

		tccr0_reg = INT_CLK_DIV8 | CTC_MODE ; /*1 ms*/
		
		TCCR0 = tccr0_reg;
 3a2:	8a e0       	ldi	r24, 0x0A	; 10
 3a4:	83 bf       	out	0x33, r24	; 51
		TCNT0 = (uint8_t)0x00;
 3a6:	12 be       	out	0x32, r1	; 50
		OCR0 = (uint8_t)0x00;
 3a8:	1c be       	out	0x3c, r1	; 60
		
		DDRB |= (0x1u << PINB3);
 3aa:	bb 9a       	sbi	0x17, 3	; 23
		
		if(T0_OFVENABLE)
		{
			TIMSK |= (0x1u << OCIE0);
 3ac:	89 b7       	in	r24, 0x39	; 57
 3ae:	82 60       	ori	r24, 0x02	; 2
 3b0:	89 bf       	out	0x39, r24	; 57
		}
}
 3b2:	08 95       	ret

000003b4 <timer_setValue>:

void timer_setValue(uint8_t timer_value)
{
	OCR0 = (uint8_t)timer_value;
 3b4:	8c bf       	out	0x3c, r24	; 60
}
 3b6:	08 95       	ret

000003b8 <dummy_task>:

void dummy_task(void)
{
	
	
}
 3b8:	08 95       	ret

000003ba <__vector_19>:
uint16_t max_count_val = 0;

volatile uint8_t _it_count = 0;

ISR(TIMER0_COMP_vect)
{
 3ba:	1f 92       	push	r1
 3bc:	0f 92       	push	r0
 3be:	0f b6       	in	r0, 0x3f	; 63
 3c0:	0f 92       	push	r0
 3c2:	11 24       	eor	r1, r1
 3c4:	8f 93       	push	r24
 3c6:	9f 93       	push	r25
	if( _it_count % 4 == 0){
 3c8:	80 91 73 00 	lds	r24, 0x0073
 3cc:	90 e0       	ldi	r25, 0x00	; 0
 3ce:	83 70       	andi	r24, 0x03	; 3
 3d0:	90 70       	andi	r25, 0x00	; 0
 3d2:	89 2b       	or	r24, r25
 3d4:	61 f4       	brne	.+24     	; 0x3ee <__vector_19+0x34>
		scheduler_status = SCH_START;
 3d6:	81 e0       	ldi	r24, 0x01	; 1
 3d8:	80 93 70 00 	sts	0x0070, r24
		counter_1ms++;
 3dc:	80 91 6e 00 	lds	r24, 0x006E
 3e0:	90 91 6f 00 	lds	r25, 0x006F
 3e4:	01 96       	adiw	r24, 0x01	; 1
 3e6:	90 93 6f 00 	sts	0x006F, r25
 3ea:	80 93 6e 00 	sts	0x006E, r24
	}
}
 3ee:	9f 91       	pop	r25
 3f0:	8f 91       	pop	r24
 3f2:	0f 90       	pop	r0
 3f4:	0f be       	out	0x3f, r0	; 63
 3f6:	0f 90       	pop	r0
 3f8:	1f 90       	pop	r1
 3fa:	18 95       	reti

000003fc <sch_setTaskStatus>:
	timer_setValue(TIMER250us);
	active_tasks = 0;
}

void sch_setTaskStatus(uint8_t task_no,uint8_t status)
{	
 3fc:	98 2f       	mov	r25, r24
	if(status == ENABLE_TASK)
 3fe:	61 30       	cpi	r22, 0x01	; 1
 400:	31 f4       	brne	.+12     	; 0x40e <sch_setTaskStatus+0x12>
	{
		active_tasks |= task_no;
 402:	80 91 94 00 	lds	r24, 0x0094
 406:	89 2b       	or	r24, r25
 408:	80 93 94 00 	sts	0x0094, r24
 40c:	08 95       	ret
	}
	else if(status == DISABLE_TASK)
 40e:	62 30       	cpi	r22, 0x02	; 2
 410:	31 f4       	brne	.+12     	; 0x41e <sch_setTaskStatus+0x22>
	{
		active_tasks &= ~task_no;
 412:	90 95       	com	r25
 414:	80 91 94 00 	lds	r24, 0x0094
 418:	89 23       	and	r24, r25
 41a:	80 93 94 00 	sts	0x0094, r24
 41e:	08 95       	ret

00000420 <sch_setTask>:
	}
}

void sch_setTask( void *funct, uint8_t priority, uint16_t period )
{
	if(priority <= MAX_TASK_NUM)
 420:	69 30       	cpi	r22, 0x09	; 9
 422:	c0 f4       	brcc	.+48     	; 0x454 <sch_setTask+0x34>
	{
		task_array[priority] = funct;
 424:	e6 2f       	mov	r30, r22
 426:	f0 e0       	ldi	r31, 0x00	; 0
 428:	ee 0f       	add	r30, r30
 42a:	ff 1f       	adc	r31, r31
 42c:	df 01       	movw	r26, r30
 42e:	ab 56       	subi	r26, 0x6B	; 107
 430:	bf 4f       	sbci	r27, 0xFF	; 255
 432:	8d 93       	st	X+, r24
 434:	9c 93       	st	X, r25
		task_period[priority] = period;
 436:	eb 55       	subi	r30, 0x5B	; 91
 438:	ff 4f       	sbci	r31, 0xFF	; 255
 43a:	51 83       	std	Z+1, r21	; 0x01
 43c:	40 83       	st	Z, r20
		
		if(period > max_count_val)
 43e:	80 91 71 00 	lds	r24, 0x0071
 442:	90 91 72 00 	lds	r25, 0x0072
 446:	84 17       	cp	r24, r20
 448:	95 07       	cpc	r25, r21
 44a:	20 f4       	brcc	.+8      	; 0x454 <sch_setTask+0x34>
		{
			max_count_val = period;
 44c:	50 93 72 00 	sts	0x0072, r21
 450:	40 93 71 00 	sts	0x0071, r20
 454:	08 95       	ret

00000456 <sch_main>:
		}
	}
}

void sch_main()
{
 456:	ef 92       	push	r14
 458:	ff 92       	push	r15
 45a:	0f 93       	push	r16
 45c:	1f 93       	push	r17
 45e:	cf 93       	push	r28
 460:	df 93       	push	r29
	
	if( scheduler_status == SCH_START)
 462:	80 91 70 00 	lds	r24, 0x0070
 466:	81 30       	cpi	r24, 0x01	; 1
 468:	81 f5       	brne	.+96     	; 0x4ca <__stack+0x6b>
 46a:	35 ea       	ldi	r19, 0xA5	; 165
 46c:	e3 2e       	mov	r14, r19
 46e:	30 e0       	ldi	r19, 0x00	; 0
 470:	f3 2e       	mov	r15, r19
 472:	05 e9       	ldi	r16, 0x95	; 149
 474:	10 e0       	ldi	r17, 0x00	; 0
 476:	c0 e0       	ldi	r28, 0x00	; 0
 478:	d0 e0       	ldi	r29, 0x00	; 0
	{
		for(uint8_t sch_index = 0; sch_index <= MAX_TASK_NUM;sch_index++)
		{
			if( ((active_tasks >> sch_index) & 1) &&   ( (counter_1ms % task_period[sch_index]) == 0) )
 47a:	80 91 94 00 	lds	r24, 0x0094
 47e:	90 e0       	ldi	r25, 0x00	; 0
 480:	0c 2e       	mov	r0, r28
 482:	02 c0       	rjmp	.+4      	; 0x488 <__stack+0x29>
 484:	95 95       	asr	r25
 486:	87 95       	ror	r24
 488:	0a 94       	dec	r0
 48a:	e2 f7       	brpl	.-8      	; 0x484 <__stack+0x25>
 48c:	80 ff       	sbrs	r24, 0
 48e:	0f c0       	rjmp	.+30     	; 0x4ae <__stack+0x4f>
 490:	80 91 6e 00 	lds	r24, 0x006E
 494:	90 91 6f 00 	lds	r25, 0x006F
 498:	d7 01       	movw	r26, r14
 49a:	6d 91       	ld	r22, X+
 49c:	7c 91       	ld	r23, X
 49e:	0e 94 22 04 	call	0x844	; 0x844 <__udivmodhi4>
 4a2:	89 2b       	or	r24, r25
 4a4:	21 f4       	brne	.+8      	; 0x4ae <__stack+0x4f>
			{
				(*task_array[sch_index])();
 4a6:	d8 01       	movw	r26, r16
 4a8:	ed 91       	ld	r30, X+
 4aa:	fc 91       	ld	r31, X
 4ac:	09 95       	icall
 4ae:	21 96       	adiw	r28, 0x01	; 1
 4b0:	e2 e0       	ldi	r30, 0x02	; 2
 4b2:	f0 e0       	ldi	r31, 0x00	; 0
 4b4:	ee 0e       	add	r14, r30
 4b6:	ff 1e       	adc	r15, r31
 4b8:	0e 5f       	subi	r16, 0xFE	; 254
 4ba:	1f 4f       	sbci	r17, 0xFF	; 255
void sch_main()
{
	
	if( scheduler_status == SCH_START)
	{
		for(uint8_t sch_index = 0; sch_index <= MAX_TASK_NUM;sch_index++)
 4bc:	c9 30       	cpi	r28, 0x09	; 9
 4be:	d1 05       	cpc	r29, r1
 4c0:	e1 f6       	brne	.-72     	; 0x47a <__stack+0x1b>
			{
				(*task_array[sch_index])();
			}
		}
		
		scheduler_status = SCH_WAIT;
 4c2:	82 e0       	ldi	r24, 0x02	; 2
 4c4:	80 93 70 00 	sts	0x0070, r24
 4c8:	04 c0       	rjmp	.+8      	; 0x4d2 <__stack+0x73>
	}
	else
	{
		while(scheduler_status == SCH_WAIT)
 4ca:	80 91 70 00 	lds	r24, 0x0070
 4ce:	82 30       	cpi	r24, 0x02	; 2
 4d0:	e1 f3       	breq	.-8      	; 0x4ca <__stack+0x6b>
			
		}
		
	}
	
}
 4d2:	df 91       	pop	r29
 4d4:	cf 91       	pop	r28
 4d6:	1f 91       	pop	r17
 4d8:	0f 91       	pop	r16
 4da:	ff 90       	pop	r15
 4dc:	ef 90       	pop	r14
 4de:	08 95       	ret

000004e0 <sch_init>:
	}
}

void sch_init()
{
	task_array[0] = &dummy_task;
 4e0:	8c ed       	ldi	r24, 0xDC	; 220
 4e2:	91 e0       	ldi	r25, 0x01	; 1
 4e4:	90 93 96 00 	sts	0x0096, r25
 4e8:	80 93 95 00 	sts	0x0095, r24
	task_array[1] = &dummy_task;
 4ec:	90 93 98 00 	sts	0x0098, r25
 4f0:	80 93 97 00 	sts	0x0097, r24
	task_array[2] = &dummy_task;
 4f4:	90 93 9a 00 	sts	0x009A, r25
 4f8:	80 93 99 00 	sts	0x0099, r24
	task_array[3] = &dummy_task;
 4fc:	90 93 9c 00 	sts	0x009C, r25
 500:	80 93 9b 00 	sts	0x009B, r24
	task_array[4] = &dummy_task;
 504:	90 93 9e 00 	sts	0x009E, r25
 508:	80 93 9d 00 	sts	0x009D, r24
	task_array[5] = &dummy_task;
 50c:	90 93 a0 00 	sts	0x00A0, r25
 510:	80 93 9f 00 	sts	0x009F, r24
	task_array[6] = &dummy_task;
 514:	90 93 a2 00 	sts	0x00A2, r25
 518:	80 93 a1 00 	sts	0x00A1, r24
	task_array[7] = &dummy_task;
 51c:	90 93 a4 00 	sts	0x00A4, r25
 520:	80 93 a3 00 	sts	0x00A3, r24
	
	timer_init();
 524:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <timer_init>
	timer_setValue(TIMER250us);
 528:	8a ef       	ldi	r24, 0xFA	; 250
 52a:	0e 94 da 01 	call	0x3b4	; 0x3b4 <timer_setValue>
	active_tasks = 0;
 52e:	10 92 94 00 	sts	0x0094, r1
}
 532:	08 95       	ret

00000534 <pid_init>:
volatile int8_t output;

void pid_init()
{

}
 534:	08 95       	ret

00000536 <pid_setpoint>:

void pid_setpoint(int16_t point)
{
	set_point = point;
 536:	90 93 75 00 	sts	0x0075, r25
 53a:	80 93 74 00 	sts	0x0074, r24
}
 53e:	08 95       	ret

00000540 <pid_set_consts>:

void pid_set_consts(int16_t p, int16_t i, int16_t d)
{
	_p = p;
 540:	90 93 66 00 	sts	0x0066, r25
 544:	80 93 65 00 	sts	0x0065, r24
	_i = i;
 548:	70 93 77 00 	sts	0x0077, r23
 54c:	60 93 76 00 	sts	0x0076, r22
	_d = d;
 550:	50 93 64 00 	sts	0x0064, r21
 554:	40 93 63 00 	sts	0x0063, r20
}
 558:	08 95       	ret

0000055a <pid_calculate>:

int8_t pid_calculate(int16_t value)
{
 55a:	2f 92       	push	r2
 55c:	3f 92       	push	r3
 55e:	4f 92       	push	r4
 560:	5f 92       	push	r5
 562:	6f 92       	push	r6
 564:	7f 92       	push	r7
 566:	8f 92       	push	r8
 568:	9f 92       	push	r9
 56a:	af 92       	push	r10
 56c:	bf 92       	push	r11
 56e:	cf 92       	push	r12
 570:	df 92       	push	r13
 572:	ef 92       	push	r14
 574:	ff 92       	push	r15
 576:	0f 93       	push	r16
 578:	1f 93       	push	r17
 57a:	cf 93       	push	r28
 57c:	df 93       	push	r29
	error = set_point - (int16_t)value;
 57e:	20 91 74 00 	lds	r18, 0x0074
 582:	30 91 75 00 	lds	r19, 0x0075
 586:	28 1b       	sub	r18, r24
 588:	39 0b       	sbc	r19, r25
 58a:	30 93 b9 00 	sts	0x00B9, r19
 58e:	20 93 b8 00 	sts	0x00B8, r18
	
//	if(integrate_count == 5)
	{
		integrate += error;
 592:	20 91 78 00 	lds	r18, 0x0078
 596:	30 91 79 00 	lds	r19, 0x0079
 59a:	80 91 b8 00 	lds	r24, 0x00B8
 59e:	90 91 b9 00 	lds	r25, 0x00B9
 5a2:	82 0f       	add	r24, r18
 5a4:	93 1f       	adc	r25, r19
 5a6:	90 93 79 00 	sts	0x0079, r25
 5aa:	80 93 78 00 	sts	0x0078, r24
//		integrate_count = 0;
	}
	integrate_count++;
 5ae:	80 91 7a 00 	lds	r24, 0x007A
 5b2:	90 91 7b 00 	lds	r25, 0x007B
 5b6:	01 96       	adiw	r24, 0x01	; 1
 5b8:	90 93 7b 00 	sts	0x007B, r25
 5bc:	80 93 7a 00 	sts	0x007A, r24

	derivate = (error - prv_error);
 5c0:	80 91 b8 00 	lds	r24, 0x00B8
 5c4:	90 91 b9 00 	lds	r25, 0x00B9
 5c8:	20 91 b5 00 	lds	r18, 0x00B5
 5cc:	30 91 b6 00 	lds	r19, 0x00B6
 5d0:	82 1b       	sub	r24, r18
 5d2:	93 0b       	sbc	r25, r19
 5d4:	90 93 bb 00 	sts	0x00BB, r25
 5d8:	80 93 ba 00 	sts	0x00BA, r24

	temp = (int32_t)((int32_t)((int32_t)_p * (int32_t)error) + (int32_t)_d * (int32_t)derivate + (int32_t)_i * (int32_t)integrate); 
 5dc:	60 90 65 00 	lds	r6, 0x0065
 5e0:	70 90 66 00 	lds	r7, 0x0066
 5e4:	a0 90 b8 00 	lds	r10, 0x00B8
 5e8:	b0 90 b9 00 	lds	r11, 0x00B9
 5ec:	20 91 63 00 	lds	r18, 0x0063
 5f0:	30 91 64 00 	lds	r19, 0x0064
 5f4:	60 91 ba 00 	lds	r22, 0x00BA
 5f8:	70 91 bb 00 	lds	r23, 0x00BB
 5fc:	c0 91 76 00 	lds	r28, 0x0076
 600:	d0 91 77 00 	lds	r29, 0x0077
 604:	20 90 78 00 	lds	r2, 0x0078
 608:	30 90 79 00 	lds	r3, 0x0079
 60c:	88 27       	eor	r24, r24
 60e:	77 fd       	sbrc	r23, 7
 610:	80 95       	com	r24
 612:	98 2f       	mov	r25, r24
 614:	44 27       	eor	r20, r20
 616:	37 fd       	sbrc	r19, 7
 618:	40 95       	com	r20
 61a:	54 2f       	mov	r21, r20
 61c:	0e 94 03 04 	call	0x806	; 0x806 <__mulsi3>
 620:	7b 01       	movw	r14, r22
 622:	8c 01       	movw	r16, r24
 624:	cc 24       	eor	r12, r12
 626:	b7 fc       	sbrc	r11, 7
 628:	c0 94       	com	r12
 62a:	dc 2c       	mov	r13, r12
 62c:	88 24       	eor	r8, r8
 62e:	77 fc       	sbrc	r7, 7
 630:	80 94       	com	r8
 632:	98 2c       	mov	r9, r8
 634:	c6 01       	movw	r24, r12
 636:	b5 01       	movw	r22, r10
 638:	a4 01       	movw	r20, r8
 63a:	93 01       	movw	r18, r6
 63c:	0e 94 03 04 	call	0x806	; 0x806 <__mulsi3>
 640:	e6 0e       	add	r14, r22
 642:	f7 1e       	adc	r15, r23
 644:	08 1f       	adc	r16, r24
 646:	19 1f       	adc	r17, r25
 648:	44 24       	eor	r4, r4
 64a:	37 fc       	sbrc	r3, 7
 64c:	40 94       	com	r4
 64e:	54 2c       	mov	r5, r4
 650:	9e 01       	movw	r18, r28
 652:	44 27       	eor	r20, r20
 654:	37 fd       	sbrc	r19, 7
 656:	40 95       	com	r20
 658:	54 2f       	mov	r21, r20
 65a:	c2 01       	movw	r24, r4
 65c:	b1 01       	movw	r22, r2
 65e:	0e 94 03 04 	call	0x806	; 0x806 <__mulsi3>
 662:	e6 0e       	add	r14, r22
 664:	f7 1e       	adc	r15, r23
 666:	08 1f       	adc	r16, r24
 668:	19 1f       	adc	r17, r25
 66a:	e0 92 68 00 	sts	0x0068, r14
 66e:	f0 92 69 00 	sts	0x0069, r15
 672:	00 93 6a 00 	sts	0x006A, r16
 676:	10 93 6b 00 	sts	0x006B, r17
	if(temp > (int32_t)32767)
 67a:	80 91 68 00 	lds	r24, 0x0068
 67e:	90 91 69 00 	lds	r25, 0x0069
 682:	a0 91 6a 00 	lds	r26, 0x006A
 686:	b0 91 6b 00 	lds	r27, 0x006B
 68a:	80 50       	subi	r24, 0x00	; 0
 68c:	90 48       	sbci	r25, 0x80	; 128
 68e:	a0 40       	sbci	r26, 0x00	; 0
 690:	b0 40       	sbci	r27, 0x00	; 0
 692:	2c f0       	brlt	.+10     	; 0x69e <pid_calculate+0x144>
	{
		temp = 32767;
 694:	8f ef       	ldi	r24, 0xFF	; 255
 696:	9f e7       	ldi	r25, 0x7F	; 127
 698:	a0 e0       	ldi	r26, 0x00	; 0
 69a:	b0 e0       	ldi	r27, 0x00	; 0
 69c:	11 c0       	rjmp	.+34     	; 0x6c0 <pid_calculate+0x166>
	}
	else if(temp < (int32_t) -32767)
 69e:	80 91 68 00 	lds	r24, 0x0068
 6a2:	90 91 69 00 	lds	r25, 0x0069
 6a6:	a0 91 6a 00 	lds	r26, 0x006A
 6aa:	b0 91 6b 00 	lds	r27, 0x006B
 6ae:	81 50       	subi	r24, 0x01	; 1
 6b0:	90 48       	sbci	r25, 0x80	; 128
 6b2:	af 4f       	sbci	r26, 0xFF	; 255
 6b4:	bf 4f       	sbci	r27, 0xFF	; 255
 6b6:	64 f4       	brge	.+24     	; 0x6d0 <pid_calculate+0x176>
	{
		temp = -32767;
 6b8:	81 e0       	ldi	r24, 0x01	; 1
 6ba:	90 e8       	ldi	r25, 0x80	; 128
 6bc:	af ef       	ldi	r26, 0xFF	; 255
 6be:	bf ef       	ldi	r27, 0xFF	; 255
 6c0:	80 93 68 00 	sts	0x0068, r24
 6c4:	90 93 69 00 	sts	0x0069, r25
 6c8:	a0 93 6a 00 	sts	0x006A, r26
 6cc:	b0 93 6b 00 	sts	0x006B, r27
	}


	output = (int8_t)(((uint32_t)temp * (uint32_t)127) / (uint32_t)(32767) );
 6d0:	20 91 68 00 	lds	r18, 0x0068
 6d4:	30 91 69 00 	lds	r19, 0x0069
 6d8:	40 91 6a 00 	lds	r20, 0x006A
 6dc:	50 91 6b 00 	lds	r21, 0x006B
 6e0:	ca 01       	movw	r24, r20
 6e2:	b9 01       	movw	r22, r18
 6e4:	e7 e0       	ldi	r30, 0x07	; 7
 6e6:	66 0f       	add	r22, r22
 6e8:	77 1f       	adc	r23, r23
 6ea:	88 1f       	adc	r24, r24
 6ec:	99 1f       	adc	r25, r25
 6ee:	ea 95       	dec	r30
 6f0:	d1 f7       	brne	.-12     	; 0x6e6 <pid_calculate+0x18c>
 6f2:	62 1b       	sub	r22, r18
 6f4:	73 0b       	sbc	r23, r19
 6f6:	84 0b       	sbc	r24, r20
 6f8:	95 0b       	sbc	r25, r21
 6fa:	2f ef       	ldi	r18, 0xFF	; 255
 6fc:	3f e7       	ldi	r19, 0x7F	; 127
 6fe:	40 e0       	ldi	r20, 0x00	; 0
 700:	50 e0       	ldi	r21, 0x00	; 0
 702:	0e 94 49 04 	call	0x892	; 0x892 <__udivmodsi4>
 706:	20 93 b7 00 	sts	0x00B7, r18
	
	

	prv_error = error;
 70a:	80 91 b8 00 	lds	r24, 0x00B8
 70e:	90 91 b9 00 	lds	r25, 0x00B9
 712:	90 93 b6 00 	sts	0x00B6, r25
 716:	80 93 b5 00 	sts	0x00B5, r24
	return output;
 71a:	80 91 b7 00 	lds	r24, 0x00B7
}
 71e:	df 91       	pop	r29
 720:	cf 91       	pop	r28
 722:	1f 91       	pop	r17
 724:	0f 91       	pop	r16
 726:	ff 90       	pop	r15
 728:	ef 90       	pop	r14
 72a:	df 90       	pop	r13
 72c:	cf 90       	pop	r12
 72e:	bf 90       	pop	r11
 730:	af 90       	pop	r10
 732:	9f 90       	pop	r9
 734:	8f 90       	pop	r8
 736:	7f 90       	pop	r7
 738:	6f 90       	pop	r6
 73a:	5f 90       	pop	r5
 73c:	4f 90       	pop	r4
 73e:	3f 90       	pop	r3
 740:	2f 90       	pop	r2
 742:	08 95       	ret

00000744 <communication_handler_init>:
void communication_handler_init()
{


	
}
 744:	08 95       	ret

00000746 <_analyse_cmd>:
void _analyse_cmd(uint8_t cmd_char)
{



	switch(an_state)
 746:	90 91 7c 00 	lds	r25, 0x007C
 74a:	92 30       	cpi	r25, 0x02	; 2
 74c:	79 f1       	breq	.+94     	; 0x7ac <_analyse_cmd+0x66>
 74e:	93 30       	cpi	r25, 0x03	; 3
 750:	28 f4       	brcc	.+10     	; 0x75c <_analyse_cmd+0x16>
 752:	99 23       	and	r25, r25
 754:	51 f0       	breq	.+20     	; 0x76a <_analyse_cmd+0x24>
 756:	91 30       	cpi	r25, 0x01	; 1
 758:	d1 f5       	brne	.+116    	; 0x7ce <_analyse_cmd+0x88>
 75a:	0b c0       	rjmp	.+22     	; 0x772 <_analyse_cmd+0x2c>
 75c:	94 30       	cpi	r25, 0x04	; 4
 75e:	c9 f0       	breq	.+50     	; 0x792 <_analyse_cmd+0x4c>
 760:	94 30       	cpi	r25, 0x04	; 4
 762:	50 f1       	brcs	.+84     	; 0x7b8 <_analyse_cmd+0x72>
 764:	95 30       	cpi	r25, 0x05	; 5
 766:	99 f5       	brne	.+102    	; 0x7ce <_analyse_cmd+0x88>
 768:	10 c0       	rjmp	.+32     	; 0x78a <_analyse_cmd+0x44>
	{
		case AN_ZERO:
		{
			if(cmd_char == 0xA0){
 76a:	80 3a       	cpi	r24, 0xA0	; 160
 76c:	59 f5       	brne	.+86     	; 0x7c4 <_analyse_cmd+0x7e>
				an_state = AN_COM_PROT;
 76e:	81 e0       	ldi	r24, 0x01	; 1
 770:	20 c0       	rjmp	.+64     	; 0x7b2 <_analyse_cmd+0x6c>
			}
		}
		break;
		case AN_COM_PROT:
		{
			if( (cmd_char == 0x0) || (cmd_char == 0x2) ){
 772:	88 23       	and	r24, r24
 774:	11 f0       	breq	.+4      	; 0x77a <_analyse_cmd+0x34>
 776:	82 30       	cpi	r24, 0x02	; 2
 778:	11 f4       	brne	.+4      	; 0x77e <_analyse_cmd+0x38>
				an_state = AN_CMD_STOP;
 77a:	85 e0       	ldi	r24, 0x05	; 5
 77c:	1a c0       	rjmp	.+52     	; 0x7b2 <_analyse_cmd+0x6c>
			}
			else if( (cmd_char == 0x82) || (cmd_char == 0x80) ){
 77e:	82 38       	cpi	r24, 0x82	; 130
 780:	11 f0       	breq	.+4      	; 0x786 <_analyse_cmd+0x40>
 782:	80 38       	cpi	r24, 0x80	; 128
 784:	f9 f4       	brne	.+62     	; 0x7c4 <_analyse_cmd+0x7e>
				an_state = AN_CMD_START;
 786:	82 e0       	ldi	r24, 0x02	; 2
 788:	14 c0       	rjmp	.+40     	; 0x7b2 <_analyse_cmd+0x6c>

		}
		break;
		case AN_CMD_STOP:
		{
			if( cmd_char == 0x0A){
 78a:	8a 30       	cpi	r24, 0x0A	; 10
 78c:	d9 f4       	brne	.+54     	; 0x7c4 <_analyse_cmd+0x7e>
				an_state = AN_STOP1;
 78e:	84 e0       	ldi	r24, 0x04	; 4
 790:	10 c0       	rjmp	.+32     	; 0x7b2 <_analyse_cmd+0x6c>
			}
		}
		break;
		case AN_STOP1:
		{
			if(cmd_char == 0x00){
 792:	88 23       	and	r24, r24
 794:	b9 f4       	brne	.+46     	; 0x7c4 <_analyse_cmd+0x7e>
				sch_setTaskStatus(TASK_1,DISABLE_TASK);
 796:	81 e0       	ldi	r24, 0x01	; 1
 798:	62 e0       	ldi	r22, 0x02	; 2
 79a:	0e 94 fe 01 	call	0x3fc	; 0x3fc <sch_setTaskStatus>
				pwm_setMotors(MOTOR_FORWARD,0,MOTOR_FORWARD,0);
 79e:	81 e0       	ldi	r24, 0x01	; 1
 7a0:	60 e0       	ldi	r22, 0x00	; 0
 7a2:	41 e0       	ldi	r20, 0x01	; 1
 7a4:	20 e0       	ldi	r18, 0x00	; 0
 7a6:	0e 94 0d 01 	call	0x21a	; 0x21a <pwm_setMotors>
 7aa:	08 95       	ret
			}
		}
		break;
		case AN_CMD_START:
		{
			if(cmd_char == 0x2){
 7ac:	82 30       	cpi	r24, 0x02	; 2
 7ae:	51 f4       	brne	.+20     	; 0x7c4 <_analyse_cmd+0x7e>
				an_state = AN_START1;
 7b0:	83 e0       	ldi	r24, 0x03	; 3
 7b2:	80 93 7c 00 	sts	0x007C, r24
 7b6:	08 95       	ret
			}
		}
		break;
		case AN_START1:
		{
			if(cmd_char == 0x0){
 7b8:	88 23       	and	r24, r24
 7ba:	39 f4       	brne	.+14     	; 0x7ca <_analyse_cmd+0x84>
				sch_setTaskStatus(TASK_1,ENABLE_TASK);
 7bc:	81 e0       	ldi	r24, 0x01	; 1
 7be:	61 e0       	ldi	r22, 0x01	; 1
 7c0:	0e 94 fe 01 	call	0x3fc	; 0x3fc <sch_setTaskStatus>
				an_state = AN_ZERO;
 7c4:	10 92 7c 00 	sts	0x007C, r1
 7c8:	08 95       	ret
			}
			else{
				an_state = AN_ZERO;
 7ca:	10 92 7c 00 	sts	0x007C, r1
 7ce:	08 95       	ret

000007d0 <communication_handler_task>:




void communication_handler_task()
{	
 7d0:	0f 93       	push	r16
 7d2:	1f 93       	push	r17
 7d4:	cf 93       	push	r28
 7d6:	df 93       	push	r29
	//get all rx commands
	uint8_t available_data = 0;
	available_data = uart_rx_flush(&uart_buffer[0]);
 7d8:	8c eb       	ldi	r24, 0xBC	; 188
 7da:	90 e0       	ldi	r25, 0x00	; 0
 7dc:	0e 94 93 01 	call	0x326	; 0x326 <uart_rx_flush>
 7e0:	cc eb       	ldi	r28, 0xBC	; 188
 7e2:	d0 e0       	ldi	r29, 0x00	; 0

	for(uint8_t idx = 0; idx < available_data; idx++)
 7e4:	08 2f       	mov	r16, r24
 7e6:	10 e0       	ldi	r17, 0x00	; 0
 7e8:	0c 0f       	add	r16, r28
 7ea:	1d 1f       	adc	r17, r29
 7ec:	04 c0       	rjmp	.+8      	; 0x7f6 <communication_handler_task+0x26>
	{
		_analyse_cmd(uart_buffer[idx]);
 7ee:	88 81       	ld	r24, Y
 7f0:	0e 94 a3 03 	call	0x746	; 0x746 <_analyse_cmd>
		uart_buffer[idx] = 0;
 7f4:	19 92       	st	Y+, r1
{	
	//get all rx commands
	uint8_t available_data = 0;
	available_data = uart_rx_flush(&uart_buffer[0]);

	for(uint8_t idx = 0; idx < available_data; idx++)
 7f6:	c0 17       	cp	r28, r16
 7f8:	d1 07       	cpc	r29, r17
 7fa:	c9 f7       	brne	.-14     	; 0x7ee <communication_handler_task+0x1e>
	{
		_analyse_cmd(uart_buffer[idx]);
		uart_buffer[idx] = 0;
	}
	
}
 7fc:	df 91       	pop	r29
 7fe:	cf 91       	pop	r28
 800:	1f 91       	pop	r17
 802:	0f 91       	pop	r16
 804:	08 95       	ret

00000806 <__mulsi3>:
 806:	62 9f       	mul	r22, r18
 808:	d0 01       	movw	r26, r0
 80a:	73 9f       	mul	r23, r19
 80c:	f0 01       	movw	r30, r0
 80e:	82 9f       	mul	r24, r18
 810:	e0 0d       	add	r30, r0
 812:	f1 1d       	adc	r31, r1
 814:	64 9f       	mul	r22, r20
 816:	e0 0d       	add	r30, r0
 818:	f1 1d       	adc	r31, r1
 81a:	92 9f       	mul	r25, r18
 81c:	f0 0d       	add	r31, r0
 81e:	83 9f       	mul	r24, r19
 820:	f0 0d       	add	r31, r0
 822:	74 9f       	mul	r23, r20
 824:	f0 0d       	add	r31, r0
 826:	65 9f       	mul	r22, r21
 828:	f0 0d       	add	r31, r0
 82a:	99 27       	eor	r25, r25
 82c:	72 9f       	mul	r23, r18
 82e:	b0 0d       	add	r27, r0
 830:	e1 1d       	adc	r30, r1
 832:	f9 1f       	adc	r31, r25
 834:	63 9f       	mul	r22, r19
 836:	b0 0d       	add	r27, r0
 838:	e1 1d       	adc	r30, r1
 83a:	f9 1f       	adc	r31, r25
 83c:	bd 01       	movw	r22, r26
 83e:	cf 01       	movw	r24, r30
 840:	11 24       	eor	r1, r1
 842:	08 95       	ret

00000844 <__udivmodhi4>:
 844:	aa 1b       	sub	r26, r26
 846:	bb 1b       	sub	r27, r27
 848:	51 e1       	ldi	r21, 0x11	; 17
 84a:	07 c0       	rjmp	.+14     	; 0x85a <__udivmodhi4_ep>

0000084c <__udivmodhi4_loop>:
 84c:	aa 1f       	adc	r26, r26
 84e:	bb 1f       	adc	r27, r27
 850:	a6 17       	cp	r26, r22
 852:	b7 07       	cpc	r27, r23
 854:	10 f0       	brcs	.+4      	; 0x85a <__udivmodhi4_ep>
 856:	a6 1b       	sub	r26, r22
 858:	b7 0b       	sbc	r27, r23

0000085a <__udivmodhi4_ep>:
 85a:	88 1f       	adc	r24, r24
 85c:	99 1f       	adc	r25, r25
 85e:	5a 95       	dec	r21
 860:	a9 f7       	brne	.-22     	; 0x84c <__udivmodhi4_loop>
 862:	80 95       	com	r24
 864:	90 95       	com	r25
 866:	bc 01       	movw	r22, r24
 868:	cd 01       	movw	r24, r26
 86a:	08 95       	ret

0000086c <__divmodhi4>:
 86c:	97 fb       	bst	r25, 7
 86e:	09 2e       	mov	r0, r25
 870:	07 26       	eor	r0, r23
 872:	0a d0       	rcall	.+20     	; 0x888 <__divmodhi4_neg1>
 874:	77 fd       	sbrc	r23, 7
 876:	04 d0       	rcall	.+8      	; 0x880 <__divmodhi4_neg2>
 878:	e5 df       	rcall	.-54     	; 0x844 <__udivmodhi4>
 87a:	06 d0       	rcall	.+12     	; 0x888 <__divmodhi4_neg1>
 87c:	00 20       	and	r0, r0
 87e:	1a f4       	brpl	.+6      	; 0x886 <__divmodhi4_exit>

00000880 <__divmodhi4_neg2>:
 880:	70 95       	com	r23
 882:	61 95       	neg	r22
 884:	7f 4f       	sbci	r23, 0xFF	; 255

00000886 <__divmodhi4_exit>:
 886:	08 95       	ret

00000888 <__divmodhi4_neg1>:
 888:	f6 f7       	brtc	.-4      	; 0x886 <__divmodhi4_exit>
 88a:	90 95       	com	r25
 88c:	81 95       	neg	r24
 88e:	9f 4f       	sbci	r25, 0xFF	; 255
 890:	08 95       	ret

00000892 <__udivmodsi4>:
 892:	a1 e2       	ldi	r26, 0x21	; 33
 894:	1a 2e       	mov	r1, r26
 896:	aa 1b       	sub	r26, r26
 898:	bb 1b       	sub	r27, r27
 89a:	fd 01       	movw	r30, r26
 89c:	0d c0       	rjmp	.+26     	; 0x8b8 <__udivmodsi4_ep>

0000089e <__udivmodsi4_loop>:
 89e:	aa 1f       	adc	r26, r26
 8a0:	bb 1f       	adc	r27, r27
 8a2:	ee 1f       	adc	r30, r30
 8a4:	ff 1f       	adc	r31, r31
 8a6:	a2 17       	cp	r26, r18
 8a8:	b3 07       	cpc	r27, r19
 8aa:	e4 07       	cpc	r30, r20
 8ac:	f5 07       	cpc	r31, r21
 8ae:	20 f0       	brcs	.+8      	; 0x8b8 <__udivmodsi4_ep>
 8b0:	a2 1b       	sub	r26, r18
 8b2:	b3 0b       	sbc	r27, r19
 8b4:	e4 0b       	sbc	r30, r20
 8b6:	f5 0b       	sbc	r31, r21

000008b8 <__udivmodsi4_ep>:
 8b8:	66 1f       	adc	r22, r22
 8ba:	77 1f       	adc	r23, r23
 8bc:	88 1f       	adc	r24, r24
 8be:	99 1f       	adc	r25, r25
 8c0:	1a 94       	dec	r1
 8c2:	69 f7       	brne	.-38     	; 0x89e <__udivmodsi4_loop>
 8c4:	60 95       	com	r22
 8c6:	70 95       	com	r23
 8c8:	80 95       	com	r24
 8ca:	90 95       	com	r25
 8cc:	9b 01       	movw	r18, r22
 8ce:	ac 01       	movw	r20, r24
 8d0:	bd 01       	movw	r22, r26
 8d2:	cf 01       	movw	r24, r30
 8d4:	08 95       	ret

000008d6 <_exit>:
 8d6:	f8 94       	cli

000008d8 <__stop_program>:
 8d8:	ff cf       	rjmp	.-2      	; 0x8d8 <__stop_program>
