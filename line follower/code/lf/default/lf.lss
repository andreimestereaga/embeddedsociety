
lf.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000090c  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  0000090c  000009c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000006c  00800068  00800068  000009c8  2**0
                  ALLOC
  3 .eeprom       00000004  00810000  00810000  000009c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .debug_aranges 00000100  00000000  00000000  000009cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000474  00000000  00000000  00000acc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000aea  00000000  00000000  00000f40  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000599  00000000  00000000  00001a2a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ac0  00000000  00000000  00001fc3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000230  00000000  00000000  00002a84  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000462  00000000  00000000  00002cb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000209  00000000  00000000  00003116  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 5d 01 	jmp	0x2ba	; 0x2ba <__vector_11>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 cb 01 	jmp	0x396	; 0x396 <__vector_19>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e0       	ldi	r30, 0x0C	; 12
  68:	f9 e0       	ldi	r31, 0x09	; 9
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a8 36       	cpi	r26, 0x68	; 104
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a8 e6       	ldi	r26, 0x68	; 104
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 3d       	cpi	r26, 0xD4	; 212
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 84 04 	jmp	0x908	; 0x908 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:

int main()
{

	/*Init all modules*/
	pwm_init();
  92:	0e 94 15 01 	call	0x22a	; 0x22a <pwm_init>
	uart_init(259);
  96:	83 e0       	ldi	r24, 0x03	; 3
  98:	91 e0       	ldi	r25, 0x01	; 1
  9a:	0e 94 9f 01 	call	0x33e	; 0x33e <uart_init>
	QTR_init();
  9e:	0e 94 40 01 	call	0x280	; 0x280 <QTR_init>
	sch_init();
  a2:	0e 94 67 02 	call	0x4ce	; 0x4ce <sch_init>
	pid_init();
  a6:	0e 94 91 02 	call	0x522	; 0x522 <pid_init>

	/*Read the PID parameter from EEPROM*/
	while( !eeprom_is_ready() ); /*wait for eeprom to be ready*/
  aa:	e1 99       	sbic	0x1c, 1	; 28
  ac:	fe cf       	rjmp	.-4      	; 0xaa <main+0x18>

	u16GlobalPid_P = (uint16_t)eeprom_read_word(&eemPid_P);
  ae:	80 e0       	ldi	r24, 0x00	; 0
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	0e 94 6e 04 	call	0x8dc	; 0x8dc <__eerd_word_m16>
  b6:	90 93 69 00 	sts	0x0069, r25
  ba:	80 93 68 00 	sts	0x0068, r24
	u16GlobalPid_D = (uint16_t)eeprom_read_word(&eemPid_D);
  be:	82 e0       	ldi	r24, 0x02	; 2
  c0:	90 e0       	ldi	r25, 0x00	; 0
  c2:	0e 94 6e 04 	call	0x8dc	; 0x8dc <__eerd_word_m16>
  c6:	90 93 6b 00 	sts	0x006B, r25
  ca:	80 93 6a 00 	sts	0x006A, r24
	

	sch_setTask(alg,0,1);
  ce:	8d e8       	ldi	r24, 0x8D	; 141
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	60 e0       	ldi	r22, 0x00	; 0
  d4:	41 e0       	ldi	r20, 0x01	; 1
  d6:	50 e0       	ldi	r21, 0x00	; 0
  d8:	0e 94 07 02 	call	0x40e	; 0x40e <sch_setTask>
	sch_setTask(communication_handler_task,1,20);
  dc:	8f ed       	ldi	r24, 0xDF	; 223
  de:	93 e0       	ldi	r25, 0x03	; 3
  e0:	61 e0       	ldi	r22, 0x01	; 1
  e2:	44 e1       	ldi	r20, 0x14	; 20
  e4:	50 e0       	ldi	r21, 0x00	; 0
  e6:	0e 94 07 02 	call	0x40e	; 0x40e <sch_setTask>
	sch_setTaskStatus(TASK_2,ENABLE_TASK);
  ea:	82 e0       	ldi	r24, 0x02	; 2
  ec:	61 e0       	ldi	r22, 0x01	; 1
  ee:	0e 94 f5 01 	call	0x3ea	; 0x3ea <sch_setTaskStatus>
	pid_setpoint(0);
  f2:	80 e0       	ldi	r24, 0x00	; 0
  f4:	90 e0       	ldi	r25, 0x00	; 0
  f6:	0e 94 92 02 	call	0x524	; 0x524 <pid_setpoint>
	pid_set_consts(u16GlobalPid_P,0,u16GlobalPid_D);
  fa:	40 91 6a 00 	lds	r20, 0x006A
  fe:	50 91 6b 00 	lds	r21, 0x006B
 102:	80 91 68 00 	lds	r24, 0x0068
 106:	90 91 69 00 	lds	r25, 0x0069
 10a:	60 e0       	ldi	r22, 0x00	; 0
 10c:	70 e0       	ldi	r23, 0x00	; 0
 10e:	0e 94 97 02 	call	0x52e	; 0x52e <pid_set_consts>

	
	sei(); 	
 112:	78 94       	sei
	

	while(1)
	{

		sch_main();
 114:	0e 94 22 02 	call	0x444	; 0x444 <sch_main>
 118:	fd cf       	rjmp	.-6      	; 0x114 <main+0x82>

0000011a <alg>:
void alg()
{
	char pos =0;
	short mask;
	//center
	sensor_value = QTR_compute();
 11a:	0e 94 49 01 	call	0x292	; 0x292 <QTR_compute>
 11e:	80 93 6d 00 	sts	0x006D, r24
	
	mask = 1 << last_offset;
 122:	50 91 61 00 	lds	r21, 0x0061
 126:	61 e0       	ldi	r22, 0x01	; 1
 128:	70 e0       	ldi	r23, 0x00	; 0
 12a:	05 2e       	mov	r0, r21
 12c:	02 c0       	rjmp	.+4      	; 0x132 <alg+0x18>
 12e:	66 0f       	add	r22, r22
 130:	77 1f       	adc	r23, r23
 132:	0a 94       	dec	r0
 134:	e2 f7       	brpl	.-8      	; 0x12e <alg+0x14>
 136:	20 e0       	ldi	r18, 0x00	; 0
 138:	30 e0       	ldi	r19, 0x00	; 0

	do
	{
		if (sensor_value & (mask << pos))
 13a:	e8 2f       	mov	r30, r24
 13c:	f0 e0       	ldi	r31, 0x00	; 0
	char pos =0;
	short mask;
	//center
	sensor_value = QTR_compute();
	
	mask = 1 << last_offset;
 13e:	42 2f       	mov	r20, r18

	do
	{
		if (sensor_value & (mask << pos))
 140:	cb 01       	movw	r24, r22
 142:	02 2e       	mov	r0, r18
 144:	02 c0       	rjmp	.+4      	; 0x14a <alg+0x30>
 146:	88 0f       	add	r24, r24
 148:	99 1f       	adc	r25, r25
 14a:	0a 94       	dec	r0
 14c:	e2 f7       	brpl	.-8      	; 0x146 <alg+0x2c>
 14e:	8e 23       	and	r24, r30
 150:	9f 23       	and	r25, r31
 152:	89 2b       	or	r24, r25
 154:	19 f0       	breq	.+6      	; 0x15c <alg+0x42>
		{
			offset = last_offset + pos;		
 156:	82 2f       	mov	r24, r18
 158:	85 0f       	add	r24, r21
 15a:	0d c0       	rjmp	.+26     	; 0x176 <alg+0x5c>
			break;
		}
		else if (sensor_value & (mask >> pos))
 15c:	cb 01       	movw	r24, r22
 15e:	02 2e       	mov	r0, r18
 160:	02 c0       	rjmp	.+4      	; 0x166 <alg+0x4c>
 162:	95 95       	asr	r25
 164:	87 95       	ror	r24
 166:	0a 94       	dec	r0
 168:	e2 f7       	brpl	.-8      	; 0x162 <alg+0x48>
 16a:	8e 23       	and	r24, r30
 16c:	9f 23       	and	r25, r31
 16e:	89 2b       	or	r24, r25
 170:	29 f0       	breq	.+10     	; 0x17c <alg+0x62>
		{
			offset = last_offset - pos;		
 172:	85 2f       	mov	r24, r21
 174:	82 1b       	sub	r24, r18
 176:	80 93 60 00 	sts	0x0060, r24
 17a:	06 c0       	rjmp	.+12     	; 0x188 <alg+0x6e>
			break;
 17c:	4f 5f       	subi	r20, 0xFF	; 255
 17e:	2f 5f       	subi	r18, 0xFF	; 255
 180:	3f 4f       	sbci	r19, 0xFF	; 255
		else
		{
			pos++;
		}
		
	}while (pos<8);	
 182:	28 30       	cpi	r18, 0x08	; 8
 184:	31 05       	cpc	r19, r1
 186:	d9 f6       	brne	.-74     	; 0x13e <alg+0x24>
	
	if (8 == pos)
 188:	48 30       	cpi	r20, 0x08	; 8
 18a:	11 f4       	brne	.+4      	; 0x190 <alg+0x76>
	{
		offset = last_offset;
 18c:	50 93 60 00 	sts	0x0060, r21
	}
	
	last_offset = offset;
 190:	20 91 60 00 	lds	r18, 0x0060
 194:	20 93 61 00 	sts	0x0061, r18
	output_pid = pid_calculate((int8_t)4 - offset);
 198:	33 27       	eor	r19, r19
 19a:	27 fd       	sbrc	r18, 7
 19c:	30 95       	com	r19
 19e:	84 e0       	ldi	r24, 0x04	; 4
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	82 1b       	sub	r24, r18
 1a4:	93 0b       	sbc	r25, r19
 1a6:	0e 94 a4 02 	call	0x548	; 0x548 <pid_calculate>
 1aa:	80 93 6f 00 	sts	0x006F, r24


	if(output_pid > 0) // increase left motor speed
 1ae:	18 16       	cp	r1, r24
 1b0:	c4 f4       	brge	.+48     	; 0x1e2 <alg+0xc8>
	{
			left_speed = speed + output_pid;
 1b2:	30 91 62 00 	lds	r19, 0x0062
 1b6:	28 2f       	mov	r18, r24
 1b8:	23 0f       	add	r18, r19
 1ba:	20 93 70 00 	sts	0x0070, r18
			if(output_pid > 100){
 1be:	85 36       	cpi	r24, 0x65	; 101
 1c0:	1c f0       	brlt	.+6      	; 0x1c8 <alg+0xae>
				pwm_setMotors(MOTOR_BACKWARD,left_speed,MOTOR_FORWARD,left_speed);
 1c2:	82 e0       	ldi	r24, 0x02	; 2
 1c4:	62 2f       	mov	r22, r18
 1c6:	0b c0       	rjmp	.+22     	; 0x1de <alg+0xc4>
			}
			else{
					
				pwm_setMotors(MOTOR_FORWARD,speed - (left_speed * 40/100),MOTOR_FORWARD,left_speed);
 1c8:	88 e2       	ldi	r24, 0x28	; 40
 1ca:	28 9f       	mul	r18, r24
 1cc:	c0 01       	movw	r24, r0
 1ce:	11 24       	eor	r1, r1
 1d0:	6c e9       	ldi	r22, 0x9C	; 156
 1d2:	7f ef       	ldi	r23, 0xFF	; 255
 1d4:	0e 94 39 04 	call	0x872	; 0x872 <__divmodhi4>
 1d8:	36 0f       	add	r19, r22
 1da:	81 e0       	ldi	r24, 0x01	; 1
 1dc:	63 2f       	mov	r22, r19
 1de:	41 e0       	ldi	r20, 0x01	; 1
 1e0:	21 c0       	rjmp	.+66     	; 0x224 <alg+0x10a>
 1e2:	30 91 62 00 	lds	r19, 0x0062
			}
	}
	else if(output_pid < 0) //right motor
 1e6:	88 23       	and	r24, r24
 1e8:	c9 f0       	breq	.+50     	; 0x21c <alg+0x102>
	{
		output_pid *= (-1);
 1ea:	81 95       	neg	r24
 1ec:	80 93 6f 00 	sts	0x006F, r24

		right_speed = speed + output_pid;
 1f0:	28 2f       	mov	r18, r24
 1f2:	23 0f       	add	r18, r19
 1f4:	20 93 71 00 	sts	0x0071, r18

		if(output_pid > 80){
 1f8:	81 35       	cpi	r24, 0x51	; 81
 1fa:	24 f0       	brlt	.+8      	; 0x204 <alg+0xea>
				pwm_setMotors(MOTOR_FORWARD,right_speed,MOTOR_BACKWARD,right_speed);
 1fc:	81 e0       	ldi	r24, 0x01	; 1
 1fe:	62 2f       	mov	r22, r18
 200:	42 e0       	ldi	r20, 0x02	; 2
 202:	10 c0       	rjmp	.+32     	; 0x224 <alg+0x10a>
		}
		else{
				pwm_setMotors(MOTOR_FORWARD,right_speed,MOTOR_FORWARD,speed- (right_speed * 40/100));
 204:	88 e2       	ldi	r24, 0x28	; 40
 206:	28 9f       	mul	r18, r24
 208:	c0 01       	movw	r24, r0
 20a:	11 24       	eor	r1, r1
 20c:	6c e9       	ldi	r22, 0x9C	; 156
 20e:	7f ef       	ldi	r23, 0xFF	; 255
 210:	0e 94 39 04 	call	0x872	; 0x872 <__divmodhi4>
 214:	36 0f       	add	r19, r22
 216:	81 e0       	ldi	r24, 0x01	; 1
 218:	62 2f       	mov	r22, r18
 21a:	02 c0       	rjmp	.+4      	; 0x220 <alg+0x106>
		}

	
	}
	else{
		pwm_setMotors(MOTOR_FORWARD,speed,MOTOR_FORWARD,speed);
 21c:	81 e0       	ldi	r24, 0x01	; 1
 21e:	63 2f       	mov	r22, r19
 220:	41 e0       	ldi	r20, 0x01	; 1
 222:	23 2f       	mov	r18, r19
 224:	0e 94 23 01 	call	0x246	; 0x246 <pwm_setMotors>
 228:	08 95       	ret

0000022a <pwm_init>:
#include "pwm.h"

void pwm_init(){

	MOTORS_SET_TOP;
 22a:	80 e4       	ldi	r24, 0x40	; 64
 22c:	91 e0       	ldi	r25, 0x01	; 1
 22e:	97 bd       	out	0x27, r25	; 39
 230:	86 bd       	out	0x26, r24	; 38
	MOTORS_INIT_TCCR1A;
 232:	8f b5       	in	r24, 0x2f	; 47
 234:	81 6a       	ori	r24, 0xA1	; 161
 236:	8f bd       	out	0x2f, r24	; 47
	MOTORS_INIT_TCCR1B;
 238:	8e b5       	in	r24, 0x2e	; 46
 23a:	82 60       	ori	r24, 0x02	; 2
 23c:	8e bd       	out	0x2e, r24	; 46

	MOTOR_DDR_SETUP;	
 23e:	81 b3       	in	r24, 0x11	; 17
 240:	88 67       	ori	r24, 0x78	; 120
 242:	81 bb       	out	0x11, r24	; 17

}
 244:	08 95       	ret

00000246 <pwm_setMotors>:


void pwm_setMotors(uint8_t right_dir,uint8_t right_val, uint8_t left_dir, uint8_t left_val){
 246:	70 e0       	ldi	r23, 0x00	; 0
	
	if(right_dir == MOTOR_FORWARD){
 248:	81 30       	cpi	r24, 0x01	; 1
 24a:	41 f4       	brne	.+16     	; 0x25c <pwm_setMotors+0x16>
		SET_RIGHT_FORWARD;
 24c:	93 9a       	sbi	0x12, 3	; 18
		SET_RIGHT_FW_PWM(right_val);
 24e:	8f ef       	ldi	r24, 0xFF	; 255
 250:	90 e0       	ldi	r25, 0x00	; 0
 252:	86 1b       	sub	r24, r22
 254:	97 0b       	sbc	r25, r23
 256:	99 bd       	out	0x29, r25	; 41
 258:	88 bd       	out	0x28, r24	; 40
 25a:	03 c0       	rjmp	.+6      	; 0x262 <pwm_setMotors+0x1c>
	}
	else{
		SET_RIGHT_BACKWARD;
 25c:	93 98       	cbi	0x12, 3	; 18
		SET_RIGHT_BK_PWM(right_val);
 25e:	79 bd       	out	0x29, r23	; 41
 260:	68 bd       	out	0x28, r22	; 40
 262:	30 e0       	ldi	r19, 0x00	; 0
	}

	if(left_dir == MOTOR_FORWARD){
 264:	41 30       	cpi	r20, 0x01	; 1
 266:	41 f4       	brne	.+16     	; 0x278 <pwm_setMotors+0x32>
		SET_LEFT_FORWARD;
 268:	96 9a       	sbi	0x12, 6	; 18
		SET_LEFT_FW_PWM(left_val);
 26a:	8f ef       	ldi	r24, 0xFF	; 255
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	82 1b       	sub	r24, r18
 270:	93 0b       	sbc	r25, r19
 272:	9b bd       	out	0x2b, r25	; 43
 274:	8a bd       	out	0x2a, r24	; 42
 276:	08 95       	ret
	}
	else{
		SET_LEFT_BACKWARD;
 278:	96 98       	cbi	0x12, 6	; 18
		SET_LEFT_BK_PWM(left_val);
 27a:	3b bd       	out	0x2b, r19	; 43
 27c:	2a bd       	out	0x2a, r18	; 42
 27e:	08 95       	ret

00000280 <QTR_init>:
*/

void QTR_init()
{

	DDRA = 0x0;
 280:	1a ba       	out	0x1a, r1	; 26
	DDRB &= 0xFC;
 282:	87 b3       	in	r24, 0x17	; 23
 284:	8c 7f       	andi	r24, 0xFC	; 252
 286:	87 bb       	out	0x17, r24	; 23

	PORTA = 0xFF;
 288:	8f ef       	ldi	r24, 0xFF	; 255
 28a:	8b bb       	out	0x1b, r24	; 27
	PORTB = 0x3;
 28c:	83 e0       	ldi	r24, 0x03	; 3
 28e:	88 bb       	out	0x18, r24	; 24

}
 290:	08 95       	ret

00000292 <QTR_compute>:

uint8_t QTR_compute()
{
	
	uint8_t value = 0;
	value = (PINA & 0xFC) << 1;
 292:	99 b3       	in	r25, 0x19	; 25
	value |= ( (PINB >> 1) & 0x1);
 294:	86 b3       	in	r24, 0x16	; 22
 296:	86 95       	lsr	r24
 298:	81 70       	andi	r24, 0x01	; 1
 29a:	9c 7f       	andi	r25, 0xFC	; 252
 29c:	99 0f       	add	r25, r25

	return value;
}
 29e:	89 2b       	or	r24, r25
 2a0:	08 95       	ret

000002a2 <__vector_13>:
uint8_t uart_rx_buffer[UART_RX_MAX];
uint8_t uart_rx_index;


ISR(USART_TXC_vect)
{
 2a2:	1f 92       	push	r1
 2a4:	0f 92       	push	r0
 2a6:	0f b6       	in	r0, 0x3f	; 63
 2a8:	0f 92       	push	r0
 2aa:	11 24       	eor	r1, r1
	uart_tx_state = UART_IDLE;
 2ac:	10 92 81 00 	sts	0x0081, r1
}
 2b0:	0f 90       	pop	r0
 2b2:	0f be       	out	0x3f, r0	; 63
 2b4:	0f 90       	pop	r0
 2b6:	1f 90       	pop	r1
 2b8:	18 95       	reti

000002ba <__vector_11>:

ISR(USART_RXC_vect)
{
 2ba:	1f 92       	push	r1
 2bc:	0f 92       	push	r0
 2be:	0f b6       	in	r0, 0x3f	; 63
 2c0:	0f 92       	push	r0
 2c2:	11 24       	eor	r1, r1
 2c4:	8f 93       	push	r24
 2c6:	9f 93       	push	r25
 2c8:	ef 93       	push	r30
 2ca:	ff 93       	push	r31
	uart_rx_state = UART_RECEIVE;
 2cc:	82 e0       	ldi	r24, 0x02	; 2
 2ce:	80 93 83 00 	sts	0x0083, r24
	uart_rx_buffer[uart_rx_index++] = UDR;
 2d2:	80 91 82 00 	lds	r24, 0x0082
 2d6:	9c b1       	in	r25, 0x0c	; 12
 2d8:	e8 2f       	mov	r30, r24
 2da:	f0 e0       	ldi	r31, 0x00	; 0
 2dc:	ec 57       	subi	r30, 0x7C	; 124
 2de:	ff 4f       	sbci	r31, 0xFF	; 255
 2e0:	90 83       	st	Z, r25
 2e2:	8f 5f       	subi	r24, 0xFF	; 255
 2e4:	80 93 82 00 	sts	0x0082, r24

	if(uart_rx_index >= UART_RX_MAX)
 2e8:	84 31       	cpi	r24, 0x14	; 20
 2ea:	10 f0       	brcs	.+4      	; 0x2f0 <__vector_11+0x36>
	{
		uart_rx_index = 0;
 2ec:	10 92 82 00 	sts	0x0082, r1
	}
}
 2f0:	ff 91       	pop	r31
 2f2:	ef 91       	pop	r30
 2f4:	9f 91       	pop	r25
 2f6:	8f 91       	pop	r24
 2f8:	0f 90       	pop	r0
 2fa:	0f be       	out	0x3f, r0	; 63
 2fc:	0f 90       	pop	r0
 2fe:	1f 90       	pop	r1
 300:	18 95       	reti

00000302 <uart_rx_flush>:

uint8_t uart_rx_flush(uint8_t *buffer)
{
 302:	ac 01       	movw	r20, r24
	cli();
 304:	f8 94       	cli
	uint8_t uart_available = 0;
	if(uart_rx_state == UART_RECEIVE)
 306:	80 91 83 00 	lds	r24, 0x0083
 30a:	82 30       	cpi	r24, 0x02	; 2
 30c:	11 f0       	breq	.+4      	; 0x312 <uart_rx_flush+0x10>
 30e:	80 e0       	ldi	r24, 0x00	; 0
 310:	14 c0       	rjmp	.+40     	; 0x33a <uart_rx_flush+0x38>
 312:	20 e0       	ldi	r18, 0x00	; 0
 314:	0a c0       	rjmp	.+20     	; 0x32a <uart_rx_flush+0x28>
	{
		for(uint8_t idx = 0; idx < uart_rx_index; idx++)
		{
			*(buffer + idx) = *(uart_rx_buffer + idx);
 316:	e2 2f       	mov	r30, r18
 318:	f0 e0       	ldi	r31, 0x00	; 0
 31a:	da 01       	movw	r26, r20
 31c:	ae 0f       	add	r26, r30
 31e:	bf 1f       	adc	r27, r31
 320:	ec 57       	subi	r30, 0x7C	; 124
 322:	ff 4f       	sbci	r31, 0xFF	; 255
 324:	80 81       	ld	r24, Z
 326:	8c 93       	st	X, r24
{
	cli();
	uint8_t uart_available = 0;
	if(uart_rx_state == UART_RECEIVE)
	{
		for(uint8_t idx = 0; idx < uart_rx_index; idx++)
 328:	2f 5f       	subi	r18, 0xFF	; 255
 32a:	80 91 82 00 	lds	r24, 0x0082
 32e:	28 17       	cp	r18, r24
 330:	90 f3       	brcs	.-28     	; 0x316 <uart_rx_flush+0x14>
		{
			*(buffer + idx) = *(uart_rx_buffer + idx);

		}
		uart_available = uart_rx_index;
		uart_rx_index = 0;
 332:	10 92 82 00 	sts	0x0082, r1
		uart_rx_state = UART_IDLE;
 336:	10 92 83 00 	sts	0x0083, r1
	}
	sei();
 33a:	78 94       	sei

	return uart_available;
}
 33c:	08 95       	ret

0000033e <uart_init>:


void uart_init(uint16_t baud) // 1Mhz baud, 8 data, 1 stop, none parity
{

	uart_rx_index = 0;
 33e:	10 92 82 00 	sts	0x0082, r1
	uart_tx_state = UART_IDLE;
 342:	10 92 81 00 	sts	0x0081, r1
	uart_rx_state = UART_IDLE;
 346:	10 92 83 00 	sts	0x0083, r1

    UCSRA  = (0x1 << U2X);
 34a:	82 e0       	ldi	r24, 0x02	; 2
 34c:	8b b9       	out	0x0b, r24	; 11
	UCSRB  = (0x1 << TXEN) | (0x1 << RXEN) | (0x1 << RXCIE) | (0x1 << TXCIE);
 34e:	88 ed       	ldi	r24, 0xD8	; 216
 350:	8a b9       	out	0x0a, r24	; 10
	UCSRC  = (0x1 << URSEL) | (0x1 << UCSZ0) | (0x1 << UCSZ1);
 352:	86 e8       	ldi	r24, 0x86	; 134
 354:	80 bd       	out	0x20, r24	; 32
	UBRRL =  3;
 356:	83 e0       	ldi	r24, 0x03	; 3
 358:	89 b9       	out	0x09, r24	; 9
	UBRRH =  1;
 35a:	81 e0       	ldi	r24, 0x01	; 1
 35c:	80 bd       	out	0x20, r24	; 32


	sei();
 35e:	78 94       	sei
}
 360:	08 95       	ret

00000362 <uart_sendByte>:

void uart_sendByte(uint8_t byte)
{
	UDR = byte;
 362:	8c b9       	out	0x0c, r24	; 12

	while( ( (UCSRA >> UDRE) & 0x1) == 0x0 )
 364:	5d 9b       	sbis	0x0b, 5	; 11
 366:	fe cf       	rjmp	.-4      	; 0x364 <uart_sendByte+0x2>
	{
		
	}
}
 368:	08 95       	ret

0000036a <uart_sendByteNotBlocking>:



uint8_t uart_sendByteNotBlocking(uint8_t byte)
{
 36a:	98 2f       	mov	r25, r24
	uint8_t retValue = UART_NOK;
	if( uart_tx_state == UART_IDLE)
 36c:	80 91 81 00 	lds	r24, 0x0081
 370:	88 23       	and	r24, r24
 372:	11 f0       	breq	.+4      	; 0x378 <uart_sendByteNotBlocking+0xe>
 374:	85 e0       	ldi	r24, 0x05	; 5
 376:	08 95       	ret
	{
		retValue = UART_OK;
		
		UDR = byte;
 378:	9c b9       	out	0x0c, r25	; 12
 37a:	84 e0       	ldi	r24, 0x04	; 4

	}

	return retValue;
}
 37c:	08 95       	ret

0000037e <timer_init>:
		uint8_t tccr0_reg = BIT8_REG_RESET;
		

		tccr0_reg = INT_CLK_DIV8 | CTC_MODE ; /*1 ms*/
		
		TCCR0 = tccr0_reg;
 37e:	8a e0       	ldi	r24, 0x0A	; 10
 380:	83 bf       	out	0x33, r24	; 51
		TCNT0 = (uint8_t)0x00;
 382:	12 be       	out	0x32, r1	; 50
		OCR0 = (uint8_t)0x00;
 384:	1c be       	out	0x3c, r1	; 60
		
		DDRB |= (0x1u << PINB3);
 386:	bb 9a       	sbi	0x17, 3	; 23
		
		if(T0_OFVENABLE)
		{
			TIMSK |= (0x1u << OCIE0);
 388:	89 b7       	in	r24, 0x39	; 57
 38a:	82 60       	ori	r24, 0x02	; 2
 38c:	89 bf       	out	0x39, r24	; 57
		}
}
 38e:	08 95       	ret

00000390 <timer_setValue>:

void timer_setValue(uint8_t timer_value)
{
	OCR0 = (uint8_t)timer_value;
 390:	8c bf       	out	0x3c, r24	; 60
}
 392:	08 95       	ret

00000394 <dummy_task>:

void dummy_task(void)
{
	
	
}
 394:	08 95       	ret

00000396 <__vector_19>:
uint16_t max_count_val = 0;

volatile uint8_t _it_count = 0;

ISR(TIMER0_COMP_vect)
{
 396:	1f 92       	push	r1
 398:	0f 92       	push	r0
 39a:	0f b6       	in	r0, 0x3f	; 63
 39c:	0f 92       	push	r0
 39e:	11 24       	eor	r1, r1
 3a0:	6f 93       	push	r22
 3a2:	7f 93       	push	r23
 3a4:	8f 93       	push	r24
 3a6:	9f 93       	push	r25
	if( _it_count % 10 == 0){
 3a8:	80 91 77 00 	lds	r24, 0x0077
 3ac:	6a e0       	ldi	r22, 0x0A	; 10
 3ae:	0e 94 19 04 	call	0x832	; 0x832 <__udivmodqi4>
 3b2:	99 23       	and	r25, r25
 3b4:	61 f4       	brne	.+24     	; 0x3ce <__vector_19+0x38>
		scheduler_status = SCH_START;
 3b6:	81 e0       	ldi	r24, 0x01	; 1
 3b8:	80 93 74 00 	sts	0x0074, r24
		counter_1ms++;
 3bc:	80 91 72 00 	lds	r24, 0x0072
 3c0:	90 91 73 00 	lds	r25, 0x0073
 3c4:	01 96       	adiw	r24, 0x01	; 1
 3c6:	90 93 73 00 	sts	0x0073, r25
 3ca:	80 93 72 00 	sts	0x0072, r24
	}

	_it_count++;
 3ce:	80 91 77 00 	lds	r24, 0x0077
 3d2:	8f 5f       	subi	r24, 0xFF	; 255
 3d4:	80 93 77 00 	sts	0x0077, r24
}
 3d8:	9f 91       	pop	r25
 3da:	8f 91       	pop	r24
 3dc:	7f 91       	pop	r23
 3de:	6f 91       	pop	r22
 3e0:	0f 90       	pop	r0
 3e2:	0f be       	out	0x3f, r0	; 63
 3e4:	0f 90       	pop	r0
 3e6:	1f 90       	pop	r1
 3e8:	18 95       	reti

000003ea <sch_setTaskStatus>:
	timer_setValue(TIMER250us);
	active_tasks = 0;
}

void sch_setTaskStatus(uint8_t task_no,uint8_t status)
{	
 3ea:	98 2f       	mov	r25, r24
	if(status == ENABLE_TASK)
 3ec:	61 30       	cpi	r22, 0x01	; 1
 3ee:	31 f4       	brne	.+12     	; 0x3fc <sch_setTaskStatus+0x12>
	{
		active_tasks |= task_no;
 3f0:	80 91 98 00 	lds	r24, 0x0098
 3f4:	89 2b       	or	r24, r25
 3f6:	80 93 98 00 	sts	0x0098, r24
 3fa:	08 95       	ret
	}
	else if(status == DISABLE_TASK)
 3fc:	62 30       	cpi	r22, 0x02	; 2
 3fe:	31 f4       	brne	.+12     	; 0x40c <sch_setTaskStatus+0x22>
	{
		active_tasks &= ~task_no;
 400:	90 95       	com	r25
 402:	80 91 98 00 	lds	r24, 0x0098
 406:	89 23       	and	r24, r25
 408:	80 93 98 00 	sts	0x0098, r24
 40c:	08 95       	ret

0000040e <sch_setTask>:
	}
}

void sch_setTask( void *funct, uint8_t priority, uint16_t period )
{
	if(priority <= MAX_TASK_NUM)
 40e:	69 30       	cpi	r22, 0x09	; 9
 410:	c0 f4       	brcc	.+48     	; 0x442 <sch_setTask+0x34>
	{
		task_array[priority] = funct;
 412:	e6 2f       	mov	r30, r22
 414:	f0 e0       	ldi	r31, 0x00	; 0
 416:	ee 0f       	add	r30, r30
 418:	ff 1f       	adc	r31, r31
 41a:	df 01       	movw	r26, r30
 41c:	a7 56       	subi	r26, 0x67	; 103
 41e:	bf 4f       	sbci	r27, 0xFF	; 255
 420:	8d 93       	st	X+, r24
 422:	9c 93       	st	X, r25
		task_period[priority] = period;
 424:	e7 55       	subi	r30, 0x57	; 87
 426:	ff 4f       	sbci	r31, 0xFF	; 255
 428:	51 83       	std	Z+1, r21	; 0x01
 42a:	40 83       	st	Z, r20
		
		if(period > max_count_val)
 42c:	80 91 75 00 	lds	r24, 0x0075
 430:	90 91 76 00 	lds	r25, 0x0076
 434:	84 17       	cp	r24, r20
 436:	95 07       	cpc	r25, r21
 438:	20 f4       	brcc	.+8      	; 0x442 <sch_setTask+0x34>
		{
			max_count_val = period;
 43a:	50 93 76 00 	sts	0x0076, r21
 43e:	40 93 75 00 	sts	0x0075, r20
 442:	08 95       	ret

00000444 <sch_main>:
		}
	}
}

void sch_main()
{
 444:	ef 92       	push	r14
 446:	ff 92       	push	r15
 448:	0f 93       	push	r16
 44a:	1f 93       	push	r17
 44c:	cf 93       	push	r28
 44e:	df 93       	push	r29
	
	if( scheduler_status == SCH_START)
 450:	80 91 74 00 	lds	r24, 0x0074
 454:	81 30       	cpi	r24, 0x01	; 1
 456:	81 f5       	brne	.+96     	; 0x4b8 <__stack+0x59>
 458:	39 ea       	ldi	r19, 0xA9	; 169
 45a:	e3 2e       	mov	r14, r19
 45c:	30 e0       	ldi	r19, 0x00	; 0
 45e:	f3 2e       	mov	r15, r19
 460:	09 e9       	ldi	r16, 0x99	; 153
 462:	10 e0       	ldi	r17, 0x00	; 0
 464:	c0 e0       	ldi	r28, 0x00	; 0
 466:	d0 e0       	ldi	r29, 0x00	; 0
	{
		for(uint8_t sch_index = 0; sch_index <= MAX_TASK_NUM;sch_index++)
		{
			if( ((active_tasks >> sch_index) & 1) &&   ( (counter_1ms % task_period[sch_index]) == 0) )
 468:	80 91 98 00 	lds	r24, 0x0098
 46c:	90 e0       	ldi	r25, 0x00	; 0
 46e:	0c 2e       	mov	r0, r28
 470:	02 c0       	rjmp	.+4      	; 0x476 <__stack+0x17>
 472:	95 95       	asr	r25
 474:	87 95       	ror	r24
 476:	0a 94       	dec	r0
 478:	e2 f7       	brpl	.-8      	; 0x472 <__stack+0x13>
 47a:	80 ff       	sbrs	r24, 0
 47c:	0f c0       	rjmp	.+30     	; 0x49c <__stack+0x3d>
 47e:	80 91 72 00 	lds	r24, 0x0072
 482:	90 91 73 00 	lds	r25, 0x0073
 486:	d7 01       	movw	r26, r14
 488:	6d 91       	ld	r22, X+
 48a:	7c 91       	ld	r23, X
 48c:	0e 94 25 04 	call	0x84a	; 0x84a <__udivmodhi4>
 490:	89 2b       	or	r24, r25
 492:	21 f4       	brne	.+8      	; 0x49c <__stack+0x3d>
			{
				(*task_array[sch_index])();
 494:	d8 01       	movw	r26, r16
 496:	ed 91       	ld	r30, X+
 498:	fc 91       	ld	r31, X
 49a:	09 95       	icall
 49c:	21 96       	adiw	r28, 0x01	; 1
 49e:	e2 e0       	ldi	r30, 0x02	; 2
 4a0:	f0 e0       	ldi	r31, 0x00	; 0
 4a2:	ee 0e       	add	r14, r30
 4a4:	ff 1e       	adc	r15, r31
 4a6:	0e 5f       	subi	r16, 0xFE	; 254
 4a8:	1f 4f       	sbci	r17, 0xFF	; 255
void sch_main()
{
	
	if( scheduler_status == SCH_START)
	{
		for(uint8_t sch_index = 0; sch_index <= MAX_TASK_NUM;sch_index++)
 4aa:	c9 30       	cpi	r28, 0x09	; 9
 4ac:	d1 05       	cpc	r29, r1
 4ae:	e1 f6       	brne	.-72     	; 0x468 <__stack+0x9>
			{
				(*task_array[sch_index])();
			}
		}
		
		scheduler_status = SCH_WAIT;
 4b0:	82 e0       	ldi	r24, 0x02	; 2
 4b2:	80 93 74 00 	sts	0x0074, r24
 4b6:	04 c0       	rjmp	.+8      	; 0x4c0 <__stack+0x61>
	}
	else
	{
		while(scheduler_status == SCH_WAIT)
 4b8:	80 91 74 00 	lds	r24, 0x0074
 4bc:	82 30       	cpi	r24, 0x02	; 2
 4be:	e1 f3       	breq	.-8      	; 0x4b8 <__stack+0x59>
			
		}
		
	}
	
}
 4c0:	df 91       	pop	r29
 4c2:	cf 91       	pop	r28
 4c4:	1f 91       	pop	r17
 4c6:	0f 91       	pop	r16
 4c8:	ff 90       	pop	r15
 4ca:	ef 90       	pop	r14
 4cc:	08 95       	ret

000004ce <sch_init>:
	_it_count++;
}

void sch_init()
{
	task_array[0] = &dummy_task;
 4ce:	8a ec       	ldi	r24, 0xCA	; 202
 4d0:	91 e0       	ldi	r25, 0x01	; 1
 4d2:	90 93 9a 00 	sts	0x009A, r25
 4d6:	80 93 99 00 	sts	0x0099, r24
	task_array[1] = &dummy_task;
 4da:	90 93 9c 00 	sts	0x009C, r25
 4de:	80 93 9b 00 	sts	0x009B, r24
	task_array[2] = &dummy_task;
 4e2:	90 93 9e 00 	sts	0x009E, r25
 4e6:	80 93 9d 00 	sts	0x009D, r24
	task_array[3] = &dummy_task;
 4ea:	90 93 a0 00 	sts	0x00A0, r25
 4ee:	80 93 9f 00 	sts	0x009F, r24
	task_array[4] = &dummy_task;
 4f2:	90 93 a2 00 	sts	0x00A2, r25
 4f6:	80 93 a1 00 	sts	0x00A1, r24
	task_array[5] = &dummy_task;
 4fa:	90 93 a4 00 	sts	0x00A4, r25
 4fe:	80 93 a3 00 	sts	0x00A3, r24
	task_array[6] = &dummy_task;
 502:	90 93 a6 00 	sts	0x00A6, r25
 506:	80 93 a5 00 	sts	0x00A5, r24
	task_array[7] = &dummy_task;
 50a:	90 93 a8 00 	sts	0x00A8, r25
 50e:	80 93 a7 00 	sts	0x00A7, r24
	
	timer_init();
 512:	0e 94 bf 01 	call	0x37e	; 0x37e <timer_init>
	timer_setValue(TIMER250us);
 516:	8a ef       	ldi	r24, 0xFA	; 250
 518:	0e 94 c8 01 	call	0x390	; 0x390 <timer_setValue>
	active_tasks = 0;
 51c:	10 92 98 00 	sts	0x0098, r1
}
 520:	08 95       	ret

00000522 <pid_init>:
volatile int8_t output;

void pid_init()
{

}
 522:	08 95       	ret

00000524 <pid_setpoint>:

void pid_setpoint(int16_t point)
{
	set_point = point;
 524:	90 93 79 00 	sts	0x0079, r25
 528:	80 93 78 00 	sts	0x0078, r24
}
 52c:	08 95       	ret

0000052e <pid_set_consts>:

void pid_set_consts(int16_t p, int16_t i, int16_t d)
{
	_p = p;
 52e:	90 93 66 00 	sts	0x0066, r25
 532:	80 93 65 00 	sts	0x0065, r24
	_i = i;
 536:	70 93 7b 00 	sts	0x007B, r23
 53a:	60 93 7a 00 	sts	0x007A, r22
	_d = d;
 53e:	50 93 64 00 	sts	0x0064, r21
 542:	40 93 63 00 	sts	0x0063, r20
}
 546:	08 95       	ret

00000548 <pid_calculate>:

int8_t pid_calculate(int16_t value)
{
 548:	2f 92       	push	r2
 54a:	3f 92       	push	r3
 54c:	4f 92       	push	r4
 54e:	5f 92       	push	r5
 550:	6f 92       	push	r6
 552:	7f 92       	push	r7
 554:	8f 92       	push	r8
 556:	9f 92       	push	r9
 558:	af 92       	push	r10
 55a:	bf 92       	push	r11
 55c:	cf 92       	push	r12
 55e:	df 92       	push	r13
 560:	ef 92       	push	r14
 562:	ff 92       	push	r15
 564:	0f 93       	push	r16
 566:	1f 93       	push	r17
 568:	cf 93       	push	r28
 56a:	df 93       	push	r29
	error = set_point - (int16_t)value;
 56c:	20 91 78 00 	lds	r18, 0x0078
 570:	30 91 79 00 	lds	r19, 0x0079
 574:	28 1b       	sub	r18, r24
 576:	39 0b       	sbc	r19, r25
 578:	30 93 bd 00 	sts	0x00BD, r19
 57c:	20 93 bc 00 	sts	0x00BC, r18
	
//	if(integrate_count == 5)
	{
		integrate += error;
 580:	20 91 7c 00 	lds	r18, 0x007C
 584:	30 91 7d 00 	lds	r19, 0x007D
 588:	80 91 bc 00 	lds	r24, 0x00BC
 58c:	90 91 bd 00 	lds	r25, 0x00BD
 590:	82 0f       	add	r24, r18
 592:	93 1f       	adc	r25, r19
 594:	90 93 7d 00 	sts	0x007D, r25
 598:	80 93 7c 00 	sts	0x007C, r24
//		integrate_count = 0;
	}
	integrate_count++;
 59c:	80 91 7e 00 	lds	r24, 0x007E
 5a0:	90 91 7f 00 	lds	r25, 0x007F
 5a4:	01 96       	adiw	r24, 0x01	; 1
 5a6:	90 93 7f 00 	sts	0x007F, r25
 5aa:	80 93 7e 00 	sts	0x007E, r24

	derivate = (error - prv_error);
 5ae:	80 91 bc 00 	lds	r24, 0x00BC
 5b2:	90 91 bd 00 	lds	r25, 0x00BD
 5b6:	20 91 b9 00 	lds	r18, 0x00B9
 5ba:	30 91 ba 00 	lds	r19, 0x00BA
 5be:	82 1b       	sub	r24, r18
 5c0:	93 0b       	sbc	r25, r19
 5c2:	90 93 bf 00 	sts	0x00BF, r25
 5c6:	80 93 be 00 	sts	0x00BE, r24

	temp = (int32_t)((int32_t)((int32_t)_p * (int32_t)error) + (int32_t)_d * (int32_t)derivate + (int32_t)_i * (int32_t)integrate); 
 5ca:	60 90 65 00 	lds	r6, 0x0065
 5ce:	70 90 66 00 	lds	r7, 0x0066
 5d2:	a0 90 bc 00 	lds	r10, 0x00BC
 5d6:	b0 90 bd 00 	lds	r11, 0x00BD
 5da:	20 91 63 00 	lds	r18, 0x0063
 5de:	30 91 64 00 	lds	r19, 0x0064
 5e2:	60 91 be 00 	lds	r22, 0x00BE
 5e6:	70 91 bf 00 	lds	r23, 0x00BF
 5ea:	c0 91 7a 00 	lds	r28, 0x007A
 5ee:	d0 91 7b 00 	lds	r29, 0x007B
 5f2:	20 90 7c 00 	lds	r2, 0x007C
 5f6:	30 90 7d 00 	lds	r3, 0x007D
 5fa:	88 27       	eor	r24, r24
 5fc:	77 fd       	sbrc	r23, 7
 5fe:	80 95       	com	r24
 600:	98 2f       	mov	r25, r24
 602:	44 27       	eor	r20, r20
 604:	37 fd       	sbrc	r19, 7
 606:	40 95       	com	r20
 608:	54 2f       	mov	r21, r20
 60a:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <__mulsi3>
 60e:	7b 01       	movw	r14, r22
 610:	8c 01       	movw	r16, r24
 612:	cc 24       	eor	r12, r12
 614:	b7 fc       	sbrc	r11, 7
 616:	c0 94       	com	r12
 618:	dc 2c       	mov	r13, r12
 61a:	88 24       	eor	r8, r8
 61c:	77 fc       	sbrc	r7, 7
 61e:	80 94       	com	r8
 620:	98 2c       	mov	r9, r8
 622:	c6 01       	movw	r24, r12
 624:	b5 01       	movw	r22, r10
 626:	a4 01       	movw	r20, r8
 628:	93 01       	movw	r18, r6
 62a:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <__mulsi3>
 62e:	e6 0e       	add	r14, r22
 630:	f7 1e       	adc	r15, r23
 632:	08 1f       	adc	r16, r24
 634:	19 1f       	adc	r17, r25
 636:	44 24       	eor	r4, r4
 638:	37 fc       	sbrc	r3, 7
 63a:	40 94       	com	r4
 63c:	54 2c       	mov	r5, r4
 63e:	9e 01       	movw	r18, r28
 640:	44 27       	eor	r20, r20
 642:	37 fd       	sbrc	r19, 7
 644:	40 95       	com	r20
 646:	54 2f       	mov	r21, r20
 648:	c2 01       	movw	r24, r4
 64a:	b1 01       	movw	r22, r2
 64c:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <__mulsi3>
 650:	e6 0e       	add	r14, r22
 652:	f7 1e       	adc	r15, r23
 654:	08 1f       	adc	r16, r24
 656:	19 1f       	adc	r17, r25
 658:	e0 92 6c 00 	sts	0x006C, r14
 65c:	f0 92 6d 00 	sts	0x006D, r15
 660:	00 93 6e 00 	sts	0x006E, r16
 664:	10 93 6f 00 	sts	0x006F, r17
	if(temp > (int32_t)32767)
 668:	80 91 6c 00 	lds	r24, 0x006C
 66c:	90 91 6d 00 	lds	r25, 0x006D
 670:	a0 91 6e 00 	lds	r26, 0x006E
 674:	b0 91 6f 00 	lds	r27, 0x006F
 678:	80 50       	subi	r24, 0x00	; 0
 67a:	90 48       	sbci	r25, 0x80	; 128
 67c:	a0 40       	sbci	r26, 0x00	; 0
 67e:	b0 40       	sbci	r27, 0x00	; 0
 680:	2c f0       	brlt	.+10     	; 0x68c <pid_calculate+0x144>
	{
		temp = 32767;
 682:	8f ef       	ldi	r24, 0xFF	; 255
 684:	9f e7       	ldi	r25, 0x7F	; 127
 686:	a0 e0       	ldi	r26, 0x00	; 0
 688:	b0 e0       	ldi	r27, 0x00	; 0
 68a:	11 c0       	rjmp	.+34     	; 0x6ae <pid_calculate+0x166>
	}
	else if(temp < (int32_t) -32767)
 68c:	80 91 6c 00 	lds	r24, 0x006C
 690:	90 91 6d 00 	lds	r25, 0x006D
 694:	a0 91 6e 00 	lds	r26, 0x006E
 698:	b0 91 6f 00 	lds	r27, 0x006F
 69c:	81 50       	subi	r24, 0x01	; 1
 69e:	90 48       	sbci	r25, 0x80	; 128
 6a0:	af 4f       	sbci	r26, 0xFF	; 255
 6a2:	bf 4f       	sbci	r27, 0xFF	; 255
 6a4:	64 f4       	brge	.+24     	; 0x6be <pid_calculate+0x176>
	{
		temp = -32767;
 6a6:	81 e0       	ldi	r24, 0x01	; 1
 6a8:	90 e8       	ldi	r25, 0x80	; 128
 6aa:	af ef       	ldi	r26, 0xFF	; 255
 6ac:	bf ef       	ldi	r27, 0xFF	; 255
 6ae:	80 93 6c 00 	sts	0x006C, r24
 6b2:	90 93 6d 00 	sts	0x006D, r25
 6b6:	a0 93 6e 00 	sts	0x006E, r26
 6ba:	b0 93 6f 00 	sts	0x006F, r27
	}


	output = (int8_t)(((uint32_t)temp * (uint32_t)127) / (uint32_t)(32767) );
 6be:	20 91 6c 00 	lds	r18, 0x006C
 6c2:	30 91 6d 00 	lds	r19, 0x006D
 6c6:	40 91 6e 00 	lds	r20, 0x006E
 6ca:	50 91 6f 00 	lds	r21, 0x006F
 6ce:	ca 01       	movw	r24, r20
 6d0:	b9 01       	movw	r22, r18
 6d2:	e7 e0       	ldi	r30, 0x07	; 7
 6d4:	66 0f       	add	r22, r22
 6d6:	77 1f       	adc	r23, r23
 6d8:	88 1f       	adc	r24, r24
 6da:	99 1f       	adc	r25, r25
 6dc:	ea 95       	dec	r30
 6de:	d1 f7       	brne	.-12     	; 0x6d4 <pid_calculate+0x18c>
 6e0:	62 1b       	sub	r22, r18
 6e2:	73 0b       	sbc	r23, r19
 6e4:	84 0b       	sbc	r24, r20
 6e6:	95 0b       	sbc	r25, r21
 6e8:	2f ef       	ldi	r18, 0xFF	; 255
 6ea:	3f e7       	ldi	r19, 0x7F	; 127
 6ec:	40 e0       	ldi	r20, 0x00	; 0
 6ee:	50 e0       	ldi	r21, 0x00	; 0
 6f0:	0e 94 4c 04 	call	0x898	; 0x898 <__udivmodsi4>
 6f4:	20 93 bb 00 	sts	0x00BB, r18
	
	

	prv_error = error;
 6f8:	80 91 bc 00 	lds	r24, 0x00BC
 6fc:	90 91 bd 00 	lds	r25, 0x00BD
 700:	90 93 ba 00 	sts	0x00BA, r25
 704:	80 93 b9 00 	sts	0x00B9, r24
	return output;
 708:	80 91 bb 00 	lds	r24, 0x00BB
}
 70c:	df 91       	pop	r29
 70e:	cf 91       	pop	r28
 710:	1f 91       	pop	r17
 712:	0f 91       	pop	r16
 714:	ff 90       	pop	r15
 716:	ef 90       	pop	r14
 718:	df 90       	pop	r13
 71a:	cf 90       	pop	r12
 71c:	bf 90       	pop	r11
 71e:	af 90       	pop	r10
 720:	9f 90       	pop	r9
 722:	8f 90       	pop	r8
 724:	7f 90       	pop	r7
 726:	6f 90       	pop	r6
 728:	5f 90       	pop	r5
 72a:	4f 90       	pop	r4
 72c:	3f 90       	pop	r3
 72e:	2f 90       	pop	r2
 730:	08 95       	ret

00000732 <communication_handler_init>:
void communication_handler_init()
{


	
}
 732:	08 95       	ret

00000734 <_analyse_cmd>:
void _analyse_cmd(uint8_t cmd_char)
{



	switch(an_state)
 734:	90 91 80 00 	lds	r25, 0x0080
 738:	92 30       	cpi	r25, 0x02	; 2
 73a:	79 f1       	breq	.+94     	; 0x79a <_analyse_cmd+0x66>
 73c:	93 30       	cpi	r25, 0x03	; 3
 73e:	28 f4       	brcc	.+10     	; 0x74a <_analyse_cmd+0x16>
 740:	99 23       	and	r25, r25
 742:	51 f0       	breq	.+20     	; 0x758 <_analyse_cmd+0x24>
 744:	91 30       	cpi	r25, 0x01	; 1
 746:	d1 f5       	brne	.+116    	; 0x7bc <_analyse_cmd+0x88>
 748:	0b c0       	rjmp	.+22     	; 0x760 <_analyse_cmd+0x2c>
 74a:	94 30       	cpi	r25, 0x04	; 4
 74c:	c9 f0       	breq	.+50     	; 0x780 <_analyse_cmd+0x4c>
 74e:	94 30       	cpi	r25, 0x04	; 4
 750:	50 f1       	brcs	.+84     	; 0x7a6 <_analyse_cmd+0x72>
 752:	95 30       	cpi	r25, 0x05	; 5
 754:	99 f5       	brne	.+102    	; 0x7bc <_analyse_cmd+0x88>
 756:	10 c0       	rjmp	.+32     	; 0x778 <_analyse_cmd+0x44>
	{
		case AN_ZERO:
		{
			if(cmd_char == 0xA0){
 758:	80 3a       	cpi	r24, 0xA0	; 160
 75a:	59 f5       	brne	.+86     	; 0x7b2 <_analyse_cmd+0x7e>
				an_state = AN_COM_PROT;
 75c:	81 e0       	ldi	r24, 0x01	; 1
 75e:	20 c0       	rjmp	.+64     	; 0x7a0 <_analyse_cmd+0x6c>
			}
		}
		break;
		case AN_COM_PROT:
		{
			if( (cmd_char == 0x0) || (cmd_char == 0x2) ){
 760:	88 23       	and	r24, r24
 762:	11 f0       	breq	.+4      	; 0x768 <_analyse_cmd+0x34>
 764:	82 30       	cpi	r24, 0x02	; 2
 766:	11 f4       	brne	.+4      	; 0x76c <_analyse_cmd+0x38>
				an_state = AN_CMD_STOP;
 768:	85 e0       	ldi	r24, 0x05	; 5
 76a:	1a c0       	rjmp	.+52     	; 0x7a0 <_analyse_cmd+0x6c>
			}
			else if( (cmd_char == 0x82) || (cmd_char == 0x80) ){
 76c:	82 38       	cpi	r24, 0x82	; 130
 76e:	11 f0       	breq	.+4      	; 0x774 <_analyse_cmd+0x40>
 770:	80 38       	cpi	r24, 0x80	; 128
 772:	f9 f4       	brne	.+62     	; 0x7b2 <_analyse_cmd+0x7e>
				an_state = AN_CMD_START;
 774:	82 e0       	ldi	r24, 0x02	; 2
 776:	14 c0       	rjmp	.+40     	; 0x7a0 <_analyse_cmd+0x6c>

		}
		break;
		case AN_CMD_STOP:
		{
			if( cmd_char == 0x0A){
 778:	8a 30       	cpi	r24, 0x0A	; 10
 77a:	d9 f4       	brne	.+54     	; 0x7b2 <_analyse_cmd+0x7e>
				an_state = AN_STOP1;
 77c:	84 e0       	ldi	r24, 0x04	; 4
 77e:	10 c0       	rjmp	.+32     	; 0x7a0 <_analyse_cmd+0x6c>
			}
		}
		break;
		case AN_STOP1:
		{
			if(cmd_char == 0x00){
 780:	88 23       	and	r24, r24
 782:	b9 f4       	brne	.+46     	; 0x7b2 <_analyse_cmd+0x7e>
				sch_setTaskStatus(TASK_1,DISABLE_TASK);
 784:	81 e0       	ldi	r24, 0x01	; 1
 786:	62 e0       	ldi	r22, 0x02	; 2
 788:	0e 94 f5 01 	call	0x3ea	; 0x3ea <sch_setTaskStatus>
				pwm_setMotors(MOTOR_FORWARD,0,MOTOR_FORWARD,0);
 78c:	81 e0       	ldi	r24, 0x01	; 1
 78e:	60 e0       	ldi	r22, 0x00	; 0
 790:	41 e0       	ldi	r20, 0x01	; 1
 792:	20 e0       	ldi	r18, 0x00	; 0
 794:	0e 94 23 01 	call	0x246	; 0x246 <pwm_setMotors>
 798:	08 95       	ret
			}
		}
		break;
		case AN_CMD_START:
		{
			if(cmd_char == 0x2){
 79a:	82 30       	cpi	r24, 0x02	; 2
 79c:	51 f4       	brne	.+20     	; 0x7b2 <_analyse_cmd+0x7e>
				an_state = AN_START1;
 79e:	83 e0       	ldi	r24, 0x03	; 3
 7a0:	80 93 80 00 	sts	0x0080, r24
 7a4:	08 95       	ret
			}
		}
		break;
		case AN_START1:
		{
			if(cmd_char == 0x0){
 7a6:	88 23       	and	r24, r24
 7a8:	39 f4       	brne	.+14     	; 0x7b8 <_analyse_cmd+0x84>
				sch_setTaskStatus(TASK_1,ENABLE_TASK);
 7aa:	81 e0       	ldi	r24, 0x01	; 1
 7ac:	61 e0       	ldi	r22, 0x01	; 1
 7ae:	0e 94 f5 01 	call	0x3ea	; 0x3ea <sch_setTaskStatus>
				an_state = AN_ZERO;
 7b2:	10 92 80 00 	sts	0x0080, r1
 7b6:	08 95       	ret
			}
			else{
				an_state = AN_ZERO;
 7b8:	10 92 80 00 	sts	0x0080, r1
 7bc:	08 95       	ret

000007be <communication_handler_task>:




void communication_handler_task()
{	
 7be:	0f 93       	push	r16
 7c0:	1f 93       	push	r17
 7c2:	cf 93       	push	r28
 7c4:	df 93       	push	r29
	//get all rx commands
	uint8_t available_data = 0;
	available_data = uart_rx_flush(&uart_buffer[0]);
 7c6:	80 ec       	ldi	r24, 0xC0	; 192
 7c8:	90 e0       	ldi	r25, 0x00	; 0
 7ca:	0e 94 81 01 	call	0x302	; 0x302 <uart_rx_flush>
 7ce:	c0 ec       	ldi	r28, 0xC0	; 192
 7d0:	d0 e0       	ldi	r29, 0x00	; 0

	for(uint8_t idx = 0; idx < available_data; idx++)
 7d2:	08 2f       	mov	r16, r24
 7d4:	10 e0       	ldi	r17, 0x00	; 0
 7d6:	0c 0f       	add	r16, r28
 7d8:	1d 1f       	adc	r17, r29
 7da:	04 c0       	rjmp	.+8      	; 0x7e4 <communication_handler_task+0x26>
	{
		_analyse_cmd(uart_buffer[idx]);
 7dc:	88 81       	ld	r24, Y
 7de:	0e 94 9a 03 	call	0x734	; 0x734 <_analyse_cmd>
		uart_buffer[idx] = 0;
 7e2:	19 92       	st	Y+, r1
{	
	//get all rx commands
	uint8_t available_data = 0;
	available_data = uart_rx_flush(&uart_buffer[0]);

	for(uint8_t idx = 0; idx < available_data; idx++)
 7e4:	c0 17       	cp	r28, r16
 7e6:	d1 07       	cpc	r29, r17
 7e8:	c9 f7       	brne	.-14     	; 0x7dc <communication_handler_task+0x1e>
	{
		_analyse_cmd(uart_buffer[idx]);
		uart_buffer[idx] = 0;
	}
	
}
 7ea:	df 91       	pop	r29
 7ec:	cf 91       	pop	r28
 7ee:	1f 91       	pop	r17
 7f0:	0f 91       	pop	r16
 7f2:	08 95       	ret

000007f4 <__mulsi3>:
 7f4:	62 9f       	mul	r22, r18
 7f6:	d0 01       	movw	r26, r0
 7f8:	73 9f       	mul	r23, r19
 7fa:	f0 01       	movw	r30, r0
 7fc:	82 9f       	mul	r24, r18
 7fe:	e0 0d       	add	r30, r0
 800:	f1 1d       	adc	r31, r1
 802:	64 9f       	mul	r22, r20
 804:	e0 0d       	add	r30, r0
 806:	f1 1d       	adc	r31, r1
 808:	92 9f       	mul	r25, r18
 80a:	f0 0d       	add	r31, r0
 80c:	83 9f       	mul	r24, r19
 80e:	f0 0d       	add	r31, r0
 810:	74 9f       	mul	r23, r20
 812:	f0 0d       	add	r31, r0
 814:	65 9f       	mul	r22, r21
 816:	f0 0d       	add	r31, r0
 818:	99 27       	eor	r25, r25
 81a:	72 9f       	mul	r23, r18
 81c:	b0 0d       	add	r27, r0
 81e:	e1 1d       	adc	r30, r1
 820:	f9 1f       	adc	r31, r25
 822:	63 9f       	mul	r22, r19
 824:	b0 0d       	add	r27, r0
 826:	e1 1d       	adc	r30, r1
 828:	f9 1f       	adc	r31, r25
 82a:	bd 01       	movw	r22, r26
 82c:	cf 01       	movw	r24, r30
 82e:	11 24       	eor	r1, r1
 830:	08 95       	ret

00000832 <__udivmodqi4>:
 832:	99 1b       	sub	r25, r25
 834:	79 e0       	ldi	r23, 0x09	; 9
 836:	04 c0       	rjmp	.+8      	; 0x840 <__udivmodqi4_ep>

00000838 <__udivmodqi4_loop>:
 838:	99 1f       	adc	r25, r25
 83a:	96 17       	cp	r25, r22
 83c:	08 f0       	brcs	.+2      	; 0x840 <__udivmodqi4_ep>
 83e:	96 1b       	sub	r25, r22

00000840 <__udivmodqi4_ep>:
 840:	88 1f       	adc	r24, r24
 842:	7a 95       	dec	r23
 844:	c9 f7       	brne	.-14     	; 0x838 <__udivmodqi4_loop>
 846:	80 95       	com	r24
 848:	08 95       	ret

0000084a <__udivmodhi4>:
 84a:	aa 1b       	sub	r26, r26
 84c:	bb 1b       	sub	r27, r27
 84e:	51 e1       	ldi	r21, 0x11	; 17
 850:	07 c0       	rjmp	.+14     	; 0x860 <__udivmodhi4_ep>

00000852 <__udivmodhi4_loop>:
 852:	aa 1f       	adc	r26, r26
 854:	bb 1f       	adc	r27, r27
 856:	a6 17       	cp	r26, r22
 858:	b7 07       	cpc	r27, r23
 85a:	10 f0       	brcs	.+4      	; 0x860 <__udivmodhi4_ep>
 85c:	a6 1b       	sub	r26, r22
 85e:	b7 0b       	sbc	r27, r23

00000860 <__udivmodhi4_ep>:
 860:	88 1f       	adc	r24, r24
 862:	99 1f       	adc	r25, r25
 864:	5a 95       	dec	r21
 866:	a9 f7       	brne	.-22     	; 0x852 <__udivmodhi4_loop>
 868:	80 95       	com	r24
 86a:	90 95       	com	r25
 86c:	bc 01       	movw	r22, r24
 86e:	cd 01       	movw	r24, r26
 870:	08 95       	ret

00000872 <__divmodhi4>:
 872:	97 fb       	bst	r25, 7
 874:	09 2e       	mov	r0, r25
 876:	07 26       	eor	r0, r23
 878:	0a d0       	rcall	.+20     	; 0x88e <__divmodhi4_neg1>
 87a:	77 fd       	sbrc	r23, 7
 87c:	04 d0       	rcall	.+8      	; 0x886 <__divmodhi4_neg2>
 87e:	e5 df       	rcall	.-54     	; 0x84a <__udivmodhi4>
 880:	06 d0       	rcall	.+12     	; 0x88e <__divmodhi4_neg1>
 882:	00 20       	and	r0, r0
 884:	1a f4       	brpl	.+6      	; 0x88c <__divmodhi4_exit>

00000886 <__divmodhi4_neg2>:
 886:	70 95       	com	r23
 888:	61 95       	neg	r22
 88a:	7f 4f       	sbci	r23, 0xFF	; 255

0000088c <__divmodhi4_exit>:
 88c:	08 95       	ret

0000088e <__divmodhi4_neg1>:
 88e:	f6 f7       	brtc	.-4      	; 0x88c <__divmodhi4_exit>
 890:	90 95       	com	r25
 892:	81 95       	neg	r24
 894:	9f 4f       	sbci	r25, 0xFF	; 255
 896:	08 95       	ret

00000898 <__udivmodsi4>:
 898:	a1 e2       	ldi	r26, 0x21	; 33
 89a:	1a 2e       	mov	r1, r26
 89c:	aa 1b       	sub	r26, r26
 89e:	bb 1b       	sub	r27, r27
 8a0:	fd 01       	movw	r30, r26
 8a2:	0d c0       	rjmp	.+26     	; 0x8be <__udivmodsi4_ep>

000008a4 <__udivmodsi4_loop>:
 8a4:	aa 1f       	adc	r26, r26
 8a6:	bb 1f       	adc	r27, r27
 8a8:	ee 1f       	adc	r30, r30
 8aa:	ff 1f       	adc	r31, r31
 8ac:	a2 17       	cp	r26, r18
 8ae:	b3 07       	cpc	r27, r19
 8b0:	e4 07       	cpc	r30, r20
 8b2:	f5 07       	cpc	r31, r21
 8b4:	20 f0       	brcs	.+8      	; 0x8be <__udivmodsi4_ep>
 8b6:	a2 1b       	sub	r26, r18
 8b8:	b3 0b       	sbc	r27, r19
 8ba:	e4 0b       	sbc	r30, r20
 8bc:	f5 0b       	sbc	r31, r21

000008be <__udivmodsi4_ep>:
 8be:	66 1f       	adc	r22, r22
 8c0:	77 1f       	adc	r23, r23
 8c2:	88 1f       	adc	r24, r24
 8c4:	99 1f       	adc	r25, r25
 8c6:	1a 94       	dec	r1
 8c8:	69 f7       	brne	.-38     	; 0x8a4 <__udivmodsi4_loop>
 8ca:	60 95       	com	r22
 8cc:	70 95       	com	r23
 8ce:	80 95       	com	r24
 8d0:	90 95       	com	r25
 8d2:	9b 01       	movw	r18, r22
 8d4:	ac 01       	movw	r20, r24
 8d6:	bd 01       	movw	r22, r26
 8d8:	cf 01       	movw	r24, r30
 8da:	08 95       	ret

000008dc <__eerd_word_m16>:
 8dc:	a8 e1       	ldi	r26, 0x18	; 24
 8de:	b0 e0       	ldi	r27, 0x00	; 0
 8e0:	42 e0       	ldi	r20, 0x02	; 2
 8e2:	50 e0       	ldi	r21, 0x00	; 0
 8e4:	0c 94 76 04 	jmp	0x8ec	; 0x8ec <__eerd_blraw_m16>

000008e8 <__eerd_block_m16>:
 8e8:	dc 01       	movw	r26, r24
 8ea:	cb 01       	movw	r24, r22

000008ec <__eerd_blraw_m16>:
 8ec:	fc 01       	movw	r30, r24
 8ee:	e1 99       	sbic	0x1c, 1	; 28
 8f0:	fe cf       	rjmp	.-4      	; 0x8ee <__eerd_blraw_m16+0x2>
 8f2:	06 c0       	rjmp	.+12     	; 0x900 <__eerd_blraw_m16+0x14>
 8f4:	ff bb       	out	0x1f, r31	; 31
 8f6:	ee bb       	out	0x1e, r30	; 30
 8f8:	e0 9a       	sbi	0x1c, 0	; 28
 8fa:	31 96       	adiw	r30, 0x01	; 1
 8fc:	0d b2       	in	r0, 0x1d	; 29
 8fe:	0d 92       	st	X+, r0
 900:	41 50       	subi	r20, 0x01	; 1
 902:	50 40       	sbci	r21, 0x00	; 0
 904:	b8 f7       	brcc	.-18     	; 0x8f4 <__eerd_blraw_m16+0x8>
 906:	08 95       	ret

00000908 <_exit>:
 908:	f8 94       	cli

0000090a <__stop_program>:
 90a:	ff cf       	rjmp	.-2      	; 0x90a <__stop_program>
