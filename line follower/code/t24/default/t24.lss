
t24.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004d0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  000004d0  00000564  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000059  00800062  00800062  00000566  2**0
                  ALLOC
  3 .debug_aranges 00000040  00000000  00000000  00000566  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000145  00000000  00000000  000005a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000686  00000000  00000000  000006eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000023b  00000000  00000000  00000d71  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000652  00000000  00000000  00000fac  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000090  00000000  00000000  00001600  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001c3  00000000  00000000  00001690  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001f4  00000000  00000000  00001853  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  00001a47  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	10 c0       	rjmp	.+32     	; 0x22 <__ctors_end>
   2:	28 c0       	rjmp	.+80     	; 0x54 <__bad_interrupt>
   4:	27 c0       	rjmp	.+78     	; 0x54 <__bad_interrupt>
   6:	26 c0       	rjmp	.+76     	; 0x54 <__bad_interrupt>
   8:	25 c0       	rjmp	.+74     	; 0x54 <__bad_interrupt>
   a:	24 c0       	rjmp	.+72     	; 0x54 <__bad_interrupt>
   c:	23 c0       	rjmp	.+70     	; 0x54 <__bad_interrupt>
   e:	22 c0       	rjmp	.+68     	; 0x54 <__bad_interrupt>
  10:	21 c0       	rjmp	.+66     	; 0x54 <__bad_interrupt>
  12:	20 c0       	rjmp	.+64     	; 0x54 <__bad_interrupt>
  14:	1f c0       	rjmp	.+62     	; 0x54 <__bad_interrupt>
  16:	1e c0       	rjmp	.+60     	; 0x54 <__bad_interrupt>
  18:	1d c0       	rjmp	.+58     	; 0x54 <__bad_interrupt>
  1a:	1c c0       	rjmp	.+56     	; 0x54 <__bad_interrupt>
  1c:	1b c0       	rjmp	.+54     	; 0x54 <__bad_interrupt>
  1e:	1a c0       	rjmp	.+52     	; 0x54 <__bad_interrupt>
  20:	19 c0       	rjmp	.+50     	; 0x54 <__bad_interrupt>

00000022 <__ctors_end>:
  22:	11 24       	eor	r1, r1
  24:	1f be       	out	0x3f, r1	; 63
  26:	cf ed       	ldi	r28, 0xDF	; 223
  28:	cd bf       	out	0x3d, r28	; 61

0000002a <__do_copy_data>:
  2a:	10 e0       	ldi	r17, 0x00	; 0
  2c:	a0 e6       	ldi	r26, 0x60	; 96
  2e:	b0 e0       	ldi	r27, 0x00	; 0
  30:	e0 ed       	ldi	r30, 0xD0	; 208
  32:	f4 e0       	ldi	r31, 0x04	; 4
  34:	02 c0       	rjmp	.+4      	; 0x3a <.do_copy_data_start>

00000036 <.do_copy_data_loop>:
  36:	05 90       	lpm	r0, Z+
  38:	0d 92       	st	X+, r0

0000003a <.do_copy_data_start>:
  3a:	a2 36       	cpi	r26, 0x62	; 98
  3c:	b1 07       	cpc	r27, r17
  3e:	d9 f7       	brne	.-10     	; 0x36 <.do_copy_data_loop>

00000040 <__do_clear_bss>:
  40:	10 e0       	ldi	r17, 0x00	; 0
  42:	a2 e6       	ldi	r26, 0x62	; 98
  44:	b0 e0       	ldi	r27, 0x00	; 0
  46:	01 c0       	rjmp	.+2      	; 0x4a <.do_clear_bss_start>

00000048 <.do_clear_bss_loop>:
  48:	1d 92       	st	X+, r1

0000004a <.do_clear_bss_start>:
  4a:	ab 3b       	cpi	r26, 0xBB	; 187
  4c:	b1 07       	cpc	r27, r17
  4e:	e1 f7       	brne	.-8      	; 0x48 <.do_clear_bss_loop>
  50:	a1 d0       	rcall	.+322    	; 0x194 <main>
  52:	3c c2       	rjmp	.+1144   	; 0x4cc <_exit>

00000054 <__bad_interrupt>:
  54:	d5 cf       	rjmp	.-86     	; 0x0 <__vectors>

00000056 <init_turbine>:



void init_turbine(){

	SET_TIMER_REG1;
  56:	8f b5       	in	r24, 0x2f	; 47
  58:	80 68       	ori	r24, 0x80	; 128
  5a:	8f bd       	out	0x2f, r24	; 47
	SET_TIMER_REG2;
  5c:	8e b5       	in	r24, 0x2e	; 46
  5e:	82 61       	ori	r24, 0x12	; 18
  60:	8e bd       	out	0x2e, r24	; 46


	SET_TOP_LVL_ICR;
  62:	80 e1       	ldi	r24, 0x10	; 16
  64:	97 e2       	ldi	r25, 0x27	; 39
  66:	95 bd       	out	0x25, r25	; 37
  68:	84 bd       	out	0x24, r24	; 36

	TURBINE_SET_PORT;
  6a:	d6 9a       	sbi	0x1a, 6	; 26

	SET_TOP_LVL_OCR;
  6c:	9b bd       	out	0x2b, r25	; 43
  6e:	8a bd       	out	0x2a, r24	; 42
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  70:	28 ec       	ldi	r18, 0xC8	; 200
  72:	30 e0       	ldi	r19, 0x00	; 0
  74:	f9 01       	movw	r30, r18
  76:	31 97       	sbiw	r30, 0x01	; 1
  78:	f1 f7       	brne	.-4      	; 0x76 <init_turbine+0x20>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  7a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  7c:	d9 f7       	brne	.-10     	; 0x74 <init_turbine+0x1e>
	_delay_ms(1000);


	TIMER_COMPARE_REG = 0;
  7e:	1b bc       	out	0x2b, r1	; 43
  80:	1a bc       	out	0x2a, r1	; 42
  82:	80 e1       	ldi	r24, 0x10	; 16
  84:	97 e2       	ldi	r25, 0x27	; 39
  86:	28 ec       	ldi	r18, 0xC8	; 200
  88:	30 e0       	ldi	r19, 0x00	; 0
  8a:	f9 01       	movw	r30, r18
  8c:	31 97       	sbiw	r30, 0x01	; 1
  8e:	f1 f7       	brne	.-4      	; 0x8c <init_turbine+0x36>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  90:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  92:	d9 f7       	brne	.-10     	; 0x8a <init_turbine+0x34>
	_delay_ms(1000);

	
	TIMER_COMPARE_REG = 0;
  94:	1b bc       	out	0x2b, r1	; 43
  96:	1a bc       	out	0x2a, r1	; 42
	turbine_lvl = 500;
  98:	84 ef       	ldi	r24, 0xF4	; 244
  9a:	91 e0       	ldi	r25, 0x01	; 1
  9c:	90 93 61 00 	sts	0x0061, r25
  a0:	80 93 60 00 	sts	0x0060, r24
}
  a4:	08 95       	ret

000000a6 <_sys_init>:

void init_turbine();

void _sys_init(){

	dbg_tx_init();
  a6:	c0 9a       	sbi	0x18, 0	; 24
  a8:	b8 9a       	sbi	0x17, 0	; 23
	init_turbine();
  aa:	d5 df       	rcall	.-86     	; 0x56 <init_turbine>

	SET_SENSOR_INPUT;
  ac:	d8 9a       	sbi	0x1b, 0	; 27
	SET_LED;
  ae:	d3 9a       	sbi	0x1a, 3	; 26

	LED_ON;
  b0:	db 9a       	sbi	0x1b, 3	; 27
  b2:	84 ef       	ldi	r24, 0xF4	; 244
  b4:	91 e0       	ldi	r25, 0x01	; 1
  b6:	28 ec       	ldi	r18, 0xC8	; 200
  b8:	30 e0       	ldi	r19, 0x00	; 0
  ba:	f9 01       	movw	r30, r18
  bc:	31 97       	sbiw	r30, 0x01	; 1
  be:	f1 f7       	brne	.-4      	; 0xbc <_sys_init+0x16>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  c0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  c2:	d9 f7       	brne	.-10     	; 0xba <_sys_init+0x14>
	_delay_ms(50);
	LED_OFF;
  c4:	db 98       	cbi	0x1b, 3	; 27
  c6:	84 ef       	ldi	r24, 0xF4	; 244
  c8:	91 e0       	ldi	r25, 0x01	; 1
  ca:	28 ec       	ldi	r18, 0xC8	; 200
  cc:	30 e0       	ldi	r19, 0x00	; 0
  ce:	f9 01       	movw	r30, r18
  d0:	31 97       	sbiw	r30, 0x01	; 1
  d2:	f1 f7       	brne	.-4      	; 0xd0 <_sys_init+0x2a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  d4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  d6:	d9 f7       	brne	.-10     	; 0xce <_sys_init+0x28>
	_delay_ms(50);
	LED_ON;
  d8:	db 9a       	sbi	0x1b, 3	; 27
  da:	88 ee       	ldi	r24, 0xE8	; 232
  dc:	93 e0       	ldi	r25, 0x03	; 3
  de:	28 ec       	ldi	r18, 0xC8	; 200
  e0:	30 e0       	ldi	r19, 0x00	; 0
  e2:	f9 01       	movw	r30, r18
  e4:	31 97       	sbiw	r30, 0x01	; 1
  e6:	f1 f7       	brne	.-4      	; 0xe4 <__stack+0x5>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  e8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  ea:	d9 f7       	brne	.-10     	; 0xe2 <__stack+0x3>
	_delay_ms(100);
	LED_OFF;
  ec:	db 98       	cbi	0x1b, 3	; 27

};
  ee:	08 95       	ret

000000f0 <set_turbine>:
	
	TIMER_COMPARE_REG = 0;
	turbine_lvl = 500;
}

uint8_t set_turbine(uint16_t value){
  f0:	9c 01       	movw	r18, r24
	
	uint8_t ret_val = 0;
	if( (value >= 500) && (value <= 1000)){
  f2:	84 5f       	subi	r24, 0xF4	; 244
  f4:	91 40       	sbci	r25, 0x01	; 1
  f6:	85 5f       	subi	r24, 0xF5	; 245
  f8:	91 40       	sbci	r25, 0x01	; 1
  fa:	10 f0       	brcs	.+4      	; 0x100 <set_turbine+0x10>
  fc:	80 e0       	ldi	r24, 0x00	; 0
  fe:	08 95       	ret
		TIMER_COMPARE_REG = value;
 100:	3b bd       	out	0x2b, r19	; 43
 102:	2a bd       	out	0x2a, r18	; 42
 104:	81 e0       	ldi	r24, 0x01	; 1
		ret_val = 1;
	}

	return ret_val;
}
 106:	08 95       	ret

00000108 <stop_turbine>:

void stop_turbine(){
	TIMER_COMPARE_REG = 0x0000;
 108:	1b bc       	out	0x2b, r1	; 43
 10a:	1a bc       	out	0x2a, r1	; 42
	turbine_lvl = 500;
 10c:	84 ef       	ldi	r24, 0xF4	; 244
 10e:	91 e0       	ldi	r25, 0x01	; 1
 110:	90 93 61 00 	sts	0x0061, r25
 114:	80 93 60 00 	sts	0x0060, r24
}
 118:	08 95       	ret

0000011a <max_turbine>:

void max_turbine(){
	TIMER_COMPARE_REG = 700;
 11a:	8c eb       	ldi	r24, 0xBC	; 188
 11c:	92 e0       	ldi	r25, 0x02	; 2
 11e:	9b bd       	out	0x2b, r25	; 43
 120:	8a bd       	out	0x2a, r24	; 42
 122:	80 e1       	ldi	r24, 0x10	; 16
 124:	97 e2       	ldi	r25, 0x27	; 39
 126:	28 ec       	ldi	r18, 0xC8	; 200
 128:	30 e0       	ldi	r19, 0x00	; 0
 12a:	f9 01       	movw	r30, r18
 12c:	31 97       	sbiw	r30, 0x01	; 1
 12e:	f1 f7       	brne	.-4      	; 0x12c <max_turbine+0x12>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 130:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 132:	d9 f7       	brne	.-10     	; 0x12a <max_turbine+0x10>
	turbine_lvl = 700;

	_delay_ms(1000);

	TIMER_COMPARE_REG = 800;
 134:	80 e2       	ldi	r24, 0x20	; 32
 136:	93 e0       	ldi	r25, 0x03	; 3
 138:	9b bd       	out	0x2b, r25	; 43
 13a:	8a bd       	out	0x2a, r24	; 42
 13c:	80 e1       	ldi	r24, 0x10	; 16
 13e:	97 e2       	ldi	r25, 0x27	; 39
 140:	28 ec       	ldi	r18, 0xC8	; 200
 142:	30 e0       	ldi	r19, 0x00	; 0
 144:	f9 01       	movw	r30, r18
 146:	31 97       	sbiw	r30, 0x01	; 1
 148:	f1 f7       	brne	.-4      	; 0x146 <max_turbine+0x2c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 14a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 14c:	d9 f7       	brne	.-10     	; 0x144 <max_turbine+0x2a>
	turbine_lvl = 800;

	_delay_ms(1000);


	TIMER_COMPARE_REG = 900;
 14e:	84 e8       	ldi	r24, 0x84	; 132
 150:	93 e0       	ldi	r25, 0x03	; 3
 152:	9b bd       	out	0x2b, r25	; 43
 154:	8a bd       	out	0x2a, r24	; 42
 156:	88 e8       	ldi	r24, 0x88	; 136
 158:	93 e1       	ldi	r25, 0x13	; 19
 15a:	28 ec       	ldi	r18, 0xC8	; 200
 15c:	30 e0       	ldi	r19, 0x00	; 0
 15e:	f9 01       	movw	r30, r18
 160:	31 97       	sbiw	r30, 0x01	; 1
 162:	f1 f7       	brne	.-4      	; 0x160 <max_turbine+0x46>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 164:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 166:	d9 f7       	brne	.-10     	; 0x15e <max_turbine+0x44>
	turbine_lvl = 900;

	_delay_ms(500);


	TIMER_COMPARE_REG = 950;
 168:	86 eb       	ldi	r24, 0xB6	; 182
 16a:	93 e0       	ldi	r25, 0x03	; 3
 16c:	9b bd       	out	0x2b, r25	; 43
 16e:	8a bd       	out	0x2a, r24	; 42
 170:	88 e8       	ldi	r24, 0x88	; 136
 172:	93 e1       	ldi	r25, 0x13	; 19
 174:	28 ec       	ldi	r18, 0xC8	; 200
 176:	30 e0       	ldi	r19, 0x00	; 0
 178:	f9 01       	movw	r30, r18
 17a:	31 97       	sbiw	r30, 0x01	; 1
 17c:	f1 f7       	brne	.-4      	; 0x17a <max_turbine+0x60>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 17e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 180:	d9 f7       	brne	.-10     	; 0x178 <max_turbine+0x5e>
	turbine_lvl = 950;

	_delay_ms(500);

	TIMER_COMPARE_REG = 1000;
 182:	88 ee       	ldi	r24, 0xE8	; 232
 184:	93 e0       	ldi	r25, 0x03	; 3
 186:	9b bd       	out	0x2b, r25	; 43
 188:	8a bd       	out	0x2a, r24	; 42
	turbine_lvl = 1000;
 18a:	90 93 61 00 	sts	0x0061, r25
 18e:	80 93 60 00 	sts	0x0060, r24



}
 192:	08 95       	ret

00000194 <main>:



int main(){
 194:	2f 92       	push	r2
 196:	3f 92       	push	r3
 198:	4f 92       	push	r4
 19a:	5f 92       	push	r5
 19c:	7f 92       	push	r7
 19e:	8f 92       	push	r8
 1a0:	9f 92       	push	r9
 1a2:	af 92       	push	r10
 1a4:	bf 92       	push	r11
 1a6:	cf 92       	push	r12
 1a8:	df 92       	push	r13
 1aa:	ef 92       	push	r14
 1ac:	ff 92       	push	r15
 1ae:	0f 93       	push	r16
 1b0:	1f 93       	push	r17
 1b2:	cf 93       	push	r28
 1b4:	df 93       	push	r29
	
	_sys_init();	
 1b6:	77 df       	rcall	.-274    	; 0xa6 <_sys_init>
				if( (hold_counter > THOMSON_REPEAT_THR) && (hold_counter < THOMSON_HOLD_THR) ){
				
					signal_periods[idx] = 0xFF;
				}
				else if( (hold_counter > SIG_HIGH_THR) && (hold_counter <= THOMSON_REPEAT_THR) ){
					signal_periods[idx] = 1;
 1b8:	77 24       	eor	r7, r7
 1ba:	73 94       	inc	r7
					msg_end_qalif++;
				}
				
				if( (hold_counter > THOMSON_REPEAT_THR) && (hold_counter < THOMSON_HOLD_THR) ){
				
					signal_periods[idx] = 0xFF;
 1bc:	aa 24       	eor	r10, r10
 1be:	aa 94       	dec	r10
		
			hold_counter++;
			sig_lvl_prev = sig_lvl;

			if(msg_end_qalif >= SIG_QALIF_THR){
				dec_state = DECODE_MSG;
 1c0:	a2 e0       	ldi	r26, 0x02	; 2
 1c2:	ba 2e       	mov	r11, r26
				if( (hold_counter > THOMSON_REPEAT_THR) && (hold_counter < THOMSON_HOLD_THR) ){
				
					signal_periods[idx] = 0xFF;
				}
				else if( (hold_counter > SIG_HIGH_THR) && (hold_counter <= THOMSON_REPEAT_THR) ){
					signal_periods[idx] = 1;
 1c4:	99 24       	eor	r9, r9
 1c6:	93 94       	inc	r9
		
		case IDLE:
		{
			
			if(sig_lvl == 0){
				dec_state = CHECK_SIG;
 1c8:	f3 e0       	ldi	r31, 0x03	; 3
 1ca:	8f 2e       	mov	r8, r31
					signal_code = 0;
				}
				
			}
			else if( signal_periods[idx] == 1 ){
				signal_code |= ( (uint32_t)0x1 << signal_shifter);
 1cc:	e1 e0       	ldi	r30, 0x01	; 1
 1ce:	ee 2e       	mov	r14, r30
 1d0:	f1 2c       	mov	r15, r1
 1d2:	01 2d       	mov	r16, r1
 1d4:	11 2d       	mov	r17, r1
 1d6:	78 ec       	ldi	r23, 0xC8	; 200
 1d8:	c7 2e       	mov	r12, r23
 1da:	d1 2c       	mov	r13, r1
	return ret_val;
}

void stop_turbine(){
	TIMER_COMPARE_REG = 0x0000;
	turbine_lvl = 500;
 1dc:	c4 ef       	ldi	r28, 0xF4	; 244
 1de:	d1 e0       	ldi	r29, 0x01	; 1



	while(1){
	
	sig_lvl = GET_DEC_LVL;
 1e0:	89 b3       	in	r24, 0x19	; 25
 1e2:	81 70       	andi	r24, 0x01	; 1
 1e4:	80 93 6d 00 	sts	0x006D, r24

	

	switch(dec_state){
 1e8:	80 91 68 00 	lds	r24, 0x0068
 1ec:	81 30       	cpi	r24, 0x01	; 1
 1ee:	09 f4       	brne	.+2      	; 0x1f2 <main+0x5e>
 1f0:	a8 c0       	rjmp	.+336    	; 0x342 <main+0x1ae>
 1f2:	81 30       	cpi	r24, 0x01	; 1
 1f4:	30 f0       	brcs	.+12     	; 0x202 <main+0x6e>
 1f6:	82 30       	cpi	r24, 0x02	; 2
 1f8:	09 f4       	brne	.+2      	; 0x1fc <main+0x68>
 1fa:	ab c0       	rjmp	.+342    	; 0x352 <main+0x1be>
 1fc:	83 30       	cpi	r24, 0x03	; 3
 1fe:	81 f7       	brne	.-32     	; 0x1e0 <main+0x4c>
 200:	0e c0       	rjmp	.+28     	; 0x21e <main+0x8a>
		
		case IDLE:
		{
			
			if(sig_lvl == 0){
 202:	80 91 6d 00 	lds	r24, 0x006D
 206:	88 23       	and	r24, r24
 208:	39 f4       	brne	.+14     	; 0x218 <main+0x84>
				dec_state = CHECK_SIG;
 20a:	80 92 68 00 	sts	0x0068, r8
				hold_counter = 0;
 20e:	10 92 6a 00 	sts	0x006A, r1
 212:	10 92 69 00 	sts	0x0069, r1
 216:	e4 cf       	rjmp	.-56     	; 0x1e0 <main+0x4c>
	
			
			}
			else{
				dec_state = IDLE;
 218:	10 92 68 00 	sts	0x0068, r1
 21c:	e1 cf       	rjmp	.-62     	; 0x1e0 <main+0x4c>
		break;

		case CHECK_SIG:
		{
			
			if(sig_lvl == 0){
 21e:	80 91 6d 00 	lds	r24, 0x006D
 222:	88 23       	and	r24, r24
 224:	51 f4       	brne	.+20     	; 0x23a <main+0xa6>
				hold_counter++;
 226:	80 91 69 00 	lds	r24, 0x0069
 22a:	90 91 6a 00 	lds	r25, 0x006A
 22e:	01 96       	adiw	r24, 0x01	; 1
 230:	90 93 6a 00 	sts	0x006A, r25
 234:	80 93 69 00 	sts	0x0069, r24
 238:	06 c0       	rjmp	.+12     	; 0x246 <main+0xb2>
			}
			else{
				dec_state = IDLE;
 23a:	10 92 68 00 	sts	0x0068, r1
				hold_counter = 0;
 23e:	10 92 6a 00 	sts	0x006A, r1
 242:	10 92 69 00 	sts	0x0069, r1
			}
			
			if(hold_counter == START_DEC_THRESHOLD){
 246:	80 91 69 00 	lds	r24, 0x0069
 24a:	90 91 6a 00 	lds	r25, 0x006A
 24e:	c2 97       	sbiw	r24, 0x32	; 50
 250:	39 f6       	brne	.-114    	; 0x1e0 <main+0x4c>
				dec_state = START_RCV;
 252:	90 92 68 00 	sts	0x0068, r9
				
				hold_counter = 0;
 256:	10 92 6a 00 	sts	0x006A, r1
 25a:	10 92 69 00 	sts	0x0069, r1
				sig_lvl = 0;
 25e:	10 92 6d 00 	sts	0x006D, r1
				idx = 0;
 262:	10 92 6f 00 	sts	0x006F, r1
				msg_end_qalif = 0;
 266:	10 92 6c 00 	sts	0x006C, r1
 26a:	ba cf       	rjmp	.-140    	; 0x1e0 <main+0x4c>

		case START_RCV:
		{
		while(idx < 75){
		
			sig_lvl = GET_DEC_LVL;
 26c:	89 b3       	in	r24, 0x19	; 25
 26e:	81 70       	andi	r24, 0x01	; 1
 270:	80 93 6d 00 	sts	0x006D, r24

			if((sig_lvl != sig_lvl_prev)  || (hold_counter == SIG_HOLD_THRS)){
 274:	90 91 6d 00 	lds	r25, 0x006D
 278:	80 91 6e 00 	lds	r24, 0x006E
 27c:	98 17       	cp	r25, r24
 27e:	41 f4       	brne	.+16     	; 0x290 <main+0xfc>
 280:	80 91 69 00 	lds	r24, 0x0069
 284:	90 91 6a 00 	lds	r25, 0x006A
 288:	88 52       	subi	r24, 0x28	; 40
 28a:	93 42       	sbci	r25, 0x23	; 35
 28c:	09 f0       	breq	.+2      	; 0x290 <main+0xfc>
 28e:	45 c0       	rjmp	.+138    	; 0x31a <main+0x186>

				if(hold_counter == SIG_HOLD_THRS){
 290:	80 91 69 00 	lds	r24, 0x0069
 294:	90 91 6a 00 	lds	r25, 0x006A
 298:	88 52       	subi	r24, 0x28	; 40
 29a:	93 42       	sbci	r25, 0x23	; 35
 29c:	29 f4       	brne	.+10     	; 0x2a8 <main+0x114>
					msg_end_qalif++;
 29e:	80 91 6c 00 	lds	r24, 0x006C
 2a2:	8f 5f       	subi	r24, 0xFF	; 255
 2a4:	80 93 6c 00 	sts	0x006C, r24
				}
				
				if( (hold_counter > THOMSON_REPEAT_THR) && (hold_counter < THOMSON_HOLD_THR) ){
 2a8:	80 91 69 00 	lds	r24, 0x0069
 2ac:	90 91 6a 00 	lds	r25, 0x006A
 2b0:	81 57       	subi	r24, 0x71	; 113
 2b2:	97 41       	sbci	r25, 0x17	; 23
 2b4:	70 f0       	brcs	.+28     	; 0x2d2 <main+0x13e>
 2b6:	80 91 69 00 	lds	r24, 0x0069
 2ba:	90 91 6a 00 	lds	r25, 0x006A
 2be:	88 52       	subi	r24, 0x28	; 40
 2c0:	93 42       	sbci	r25, 0x23	; 35
 2c2:	38 f4       	brcc	.+14     	; 0x2d2 <main+0x13e>
				
					signal_periods[idx] = 0xFF;
 2c4:	e0 91 6f 00 	lds	r30, 0x006F
 2c8:	f0 e0       	ldi	r31, 0x00	; 0
 2ca:	e0 59       	subi	r30, 0x90	; 144
 2cc:	ff 4f       	sbci	r31, 0xFF	; 255
 2ce:	a0 82       	st	Z, r10
 2d0:	1b c0       	rjmp	.+54     	; 0x308 <main+0x174>
				}
				else if( (hold_counter > SIG_HIGH_THR) && (hold_counter <= THOMSON_REPEAT_THR) ){
 2d2:	80 91 69 00 	lds	r24, 0x0069
 2d6:	90 91 6a 00 	lds	r25, 0x006A
 2da:	89 55       	subi	r24, 0x59	; 89
 2dc:	92 40       	sbci	r25, 0x02	; 2
 2de:	70 f0       	brcs	.+28     	; 0x2fc <main+0x168>
 2e0:	80 91 69 00 	lds	r24, 0x0069
 2e4:	90 91 6a 00 	lds	r25, 0x006A
 2e8:	81 57       	subi	r24, 0x71	; 113
 2ea:	97 41       	sbci	r25, 0x17	; 23
 2ec:	38 f4       	brcc	.+14     	; 0x2fc <main+0x168>
					signal_periods[idx] = 1;
 2ee:	e0 91 6f 00 	lds	r30, 0x006F
 2f2:	f0 e0       	ldi	r31, 0x00	; 0
 2f4:	e0 59       	subi	r30, 0x90	; 144
 2f6:	ff 4f       	sbci	r31, 0xFF	; 255
 2f8:	70 82       	st	Z, r7
 2fa:	06 c0       	rjmp	.+12     	; 0x308 <main+0x174>
				}
				else{
					signal_periods[idx] = 0;
 2fc:	e0 91 6f 00 	lds	r30, 0x006F
 300:	f0 e0       	ldi	r31, 0x00	; 0
 302:	e0 59       	subi	r30, 0x90	; 144
 304:	ff 4f       	sbci	r31, 0xFF	; 255
 306:	10 82       	st	Z, r1
				}

				idx++;
 308:	80 91 6f 00 	lds	r24, 0x006F
 30c:	8f 5f       	subi	r24, 0xFF	; 255
 30e:	80 93 6f 00 	sts	0x006F, r24
				hold_counter = 0;
 312:	10 92 6a 00 	sts	0x006A, r1
 316:	10 92 69 00 	sts	0x0069, r1
			}
		
			hold_counter++;
 31a:	80 91 69 00 	lds	r24, 0x0069
 31e:	90 91 6a 00 	lds	r25, 0x006A
 322:	01 96       	adiw	r24, 0x01	; 1
 324:	90 93 6a 00 	sts	0x006A, r25
 328:	80 93 69 00 	sts	0x0069, r24
			sig_lvl_prev = sig_lvl;
 32c:	80 91 6d 00 	lds	r24, 0x006D
 330:	80 93 6e 00 	sts	0x006E, r24

			if(msg_end_qalif >= SIG_QALIF_THR){
 334:	80 91 6c 00 	lds	r24, 0x006C
 338:	82 30       	cpi	r24, 0x02	; 2
 33a:	18 f0       	brcs	.+6      	; 0x342 <main+0x1ae>
				dec_state = DECODE_MSG;
 33c:	b0 92 68 00 	sts	0x0068, r11
 340:	05 c0       	rjmp	.+10     	; 0x34c <main+0x1b8>
		}	
		break;

		case START_RCV:
		{
		while(idx < 75){
 342:	80 91 6f 00 	lds	r24, 0x006F
 346:	8b 34       	cpi	r24, 0x4B	; 75
 348:	08 f4       	brcc	.+2      	; 0x34c <main+0x1b8>
 34a:	90 cf       	rjmp	.-224    	; 0x26c <main+0xd8>
				break;
			}

		}

		dec_state = DECODE_MSG;
 34c:	b0 92 68 00 	sts	0x0068, r11
 350:	47 cf       	rjmp	.-370    	; 0x1e0 <main+0x4c>
		{
		
		signal_code = 0;
		signal_shifter = 0;

		for(idx = 0; idx < 75; idx++){
 352:	10 92 6f 00 	sts	0x006F, r1
 356:	20 e0       	ldi	r18, 0x00	; 0
 358:	30 e0       	ldi	r19, 0x00	; 0
 35a:	40 e0       	ldi	r20, 0x00	; 0
 35c:	50 e0       	ldi	r21, 0x00	; 0
 35e:	90 e0       	ldi	r25, 0x00	; 0
 360:	33 c0       	rjmp	.+102    	; 0x3c8 <main+0x234>
			
			
			if( signal_periods[idx] == 0xFF ){
 362:	e0 91 6f 00 	lds	r30, 0x006F
 366:	f0 e0       	ldi	r31, 0x00	; 0
 368:	e0 59       	subi	r30, 0x90	; 144
 36a:	ff 4f       	sbci	r31, 0xFF	; 255
 36c:	80 81       	ld	r24, Z
 36e:	8f 3f       	cpi	r24, 0xFF	; 255
 370:	41 f4       	brne	.+16     	; 0x382 <main+0x1ee>
				if(signal_shifter == THOMSON_MAX_BITS){
 372:	99 31       	cpi	r25, 0x19	; 25
 374:	21 f0       	breq	.+8      	; 0x37e <main+0x1ea>
 376:	20 e0       	ldi	r18, 0x00	; 0
 378:	30 e0       	ldi	r19, 0x00	; 0
 37a:	40 e0       	ldi	r20, 0x00	; 0
 37c:	50 e0       	ldi	r21, 0x00	; 0
 37e:	90 e0       	ldi	r25, 0x00	; 0
 380:	18 c0       	rjmp	.+48     	; 0x3b2 <main+0x21e>
					signal_shifter = 0;
					signal_code = 0;
				}
				
			}
			else if( signal_periods[idx] == 1 ){
 382:	e0 91 6f 00 	lds	r30, 0x006F
 386:	f0 e0       	ldi	r31, 0x00	; 0
 388:	e0 59       	subi	r30, 0x90	; 144
 38a:	ff 4f       	sbci	r31, 0xFF	; 255
 38c:	80 81       	ld	r24, Z
 38e:	69 2f       	mov	r22, r25
 390:	6f 5f       	subi	r22, 0xFF	; 255
 392:	81 30       	cpi	r24, 0x01	; 1
 394:	69 f4       	brne	.+26     	; 0x3b0 <main+0x21c>
				signal_code |= ( (uint32_t)0x1 << signal_shifter);
 396:	17 01       	movw	r2, r14
 398:	28 01       	movw	r4, r16
 39a:	04 c0       	rjmp	.+8      	; 0x3a4 <main+0x210>
 39c:	22 0c       	add	r2, r2
 39e:	33 1c       	adc	r3, r3
 3a0:	44 1c       	adc	r4, r4
 3a2:	55 1c       	adc	r5, r5
 3a4:	9a 95       	dec	r25
 3a6:	d2 f7       	brpl	.-12     	; 0x39c <main+0x208>
 3a8:	22 29       	or	r18, r2
 3aa:	33 29       	or	r19, r3
 3ac:	44 29       	or	r20, r4
 3ae:	55 29       	or	r21, r5
				signal_shifter++;
			}
			else{
				signal_shifter++;
 3b0:	96 2f       	mov	r25, r22
			}

			signal_periods[idx] = 0;
 3b2:	e0 91 6f 00 	lds	r30, 0x006F
 3b6:	f0 e0       	ldi	r31, 0x00	; 0
 3b8:	e0 59       	subi	r30, 0x90	; 144
 3ba:	ff 4f       	sbci	r31, 0xFF	; 255
 3bc:	10 82       	st	Z, r1
		{
		
		signal_code = 0;
		signal_shifter = 0;

		for(idx = 0; idx < 75; idx++){
 3be:	80 91 6f 00 	lds	r24, 0x006F
 3c2:	8f 5f       	subi	r24, 0xFF	; 255
 3c4:	80 93 6f 00 	sts	0x006F, r24
 3c8:	80 91 6f 00 	lds	r24, 0x006F
 3cc:	8b 34       	cpi	r24, 0x4B	; 75
 3ce:	48 f2       	brcs	.-110    	; 0x362 <main+0x1ce>
 3d0:	20 93 62 00 	sts	0x0062, r18
 3d4:	30 93 63 00 	sts	0x0063, r19
 3d8:	40 93 64 00 	sts	0x0064, r20
 3dc:	50 93 65 00 	sts	0x0065, r21
 3e0:	90 93 66 00 	sts	0x0066, r25
			}

			signal_periods[idx] = 0;
		}

		LED_ON;
 3e4:	db 9a       	sbi	0x1b, 3	; 27
 3e6:	88 ee       	ldi	r24, 0xE8	; 232
 3e8:	93 e0       	ldi	r25, 0x03	; 3
 3ea:	f6 01       	movw	r30, r12
 3ec:	31 97       	sbiw	r30, 0x01	; 1
 3ee:	f1 f7       	brne	.-4      	; 0x3ec <main+0x258>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 3f0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 3f2:	d9 f7       	brne	.-10     	; 0x3ea <main+0x256>
		_delay_ms(100);
		LED_OFF;
 3f4:	db 98       	cbi	0x1b, 3	; 27
		msg_counter++;
 3f6:	80 91 6b 00 	lds	r24, 0x006B
 3fa:	8f 5f       	subi	r24, 0xFF	; 255
 3fc:	80 93 6b 00 	sts	0x006B, r24
		dec_state = IDLE;
 400:	10 92 68 00 	sts	0x0068, r1

		if( (uint8_t)(signal_code >> 16) == 0x0A){
 404:	ca 01       	movw	r24, r20
 406:	aa 27       	eor	r26, r26
 408:	bb 27       	eor	r27, r27
 40a:	8a 30       	cpi	r24, 0x0A	; 10
 40c:	39 f4       	brne	.+14     	; 0x41c <main+0x288>

	return ret_val;
}

void stop_turbine(){
	TIMER_COMPARE_REG = 0x0000;
 40e:	1b bc       	out	0x2b, r1	; 43
 410:	1a bc       	out	0x2a, r1	; 42
	turbine_lvl = 500;
 412:	d0 93 61 00 	sts	0x0061, r29
 416:	c0 93 60 00 	sts	0x0060, r28
 41a:	24 c0       	rjmp	.+72     	; 0x464 <main+0x2d0>
		dec_state = IDLE;

		if( (uint8_t)(signal_code >> 16) == 0x0A){
			stop_turbine();
		}
		else if( (uint8_t)(signal_code >> 16) == 0x82){
 41c:	82 38       	cpi	r24, 0x82	; 130
 41e:	51 f4       	brne	.+20     	; 0x434 <main+0x2a0>
			if(set_turbine( (uint16_t)(turbine_lvl + 50)) ){
 420:	80 91 60 00 	lds	r24, 0x0060
 424:	90 91 61 00 	lds	r25, 0x0061
 428:	9c 01       	movw	r18, r24
 42a:	2e 5c       	subi	r18, 0xCE	; 206
 42c:	3f 4f       	sbci	r19, 0xFF	; 255
}

uint8_t set_turbine(uint16_t value){
	
	uint8_t ret_val = 0;
	if( (value >= 500) && (value <= 1000)){
 42e:	82 5c       	subi	r24, 0xC2	; 194
 430:	91 40       	sbci	r25, 0x01	; 1
 432:	0b c0       	rjmp	.+22     	; 0x44a <main+0x2b6>
		else if( (uint8_t)(signal_code >> 16) == 0x82){
			if(set_turbine( (uint16_t)(turbine_lvl + 50)) ){
				turbine_lvl += 50;
			}
		}
		else if( (uint8_t)(signal_code >> 16) == 0x22){
 434:	82 32       	cpi	r24, 0x22	; 34
 436:	99 f4       	brne	.+38     	; 0x45e <main+0x2ca>
			if(set_turbine( (uint16_t)(turbine_lvl - 50)) ){
 438:	80 91 60 00 	lds	r24, 0x0060
 43c:	90 91 61 00 	lds	r25, 0x0061
 440:	9c 01       	movw	r18, r24
 442:	22 53       	subi	r18, 0x32	; 50
 444:	30 40       	sbci	r19, 0x00	; 0
}

uint8_t set_turbine(uint16_t value){
	
	uint8_t ret_val = 0;
	if( (value >= 500) && (value <= 1000)){
 446:	86 52       	subi	r24, 0x26	; 38
 448:	92 40       	sbci	r25, 0x02	; 2
 44a:	85 5f       	subi	r24, 0xF5	; 245
 44c:	91 40       	sbci	r25, 0x01	; 1
 44e:	50 f4       	brcc	.+20     	; 0x464 <main+0x2d0>
		TIMER_COMPARE_REG = value;
 450:	3b bd       	out	0x2b, r19	; 43
 452:	2a bd       	out	0x2a, r18	; 42
				turbine_lvl += 50;
			}
		}
		else if( (uint8_t)(signal_code >> 16) == 0x22){
			if(set_turbine( (uint16_t)(turbine_lvl - 50)) ){
				turbine_lvl -= 50;
 454:	30 93 61 00 	sts	0x0061, r19
 458:	20 93 60 00 	sts	0x0060, r18
 45c:	03 c0       	rjmp	.+6      	; 0x464 <main+0x2d0>
			}
		}
		else if( (uint8_t)(signal_code >> 16) == 0x88){
 45e:	88 38       	cpi	r24, 0x88	; 136
 460:	09 f4       	brne	.+2      	; 0x464 <main+0x2d0>
			max_turbine();
 462:	5b de       	rcall	.-842    	; 0x11a <max_turbine>
		}
		
		dbg_putchar( (uint8_t) signal_code);
 464:	80 91 62 00 	lds	r24, 0x0062
 468:	14 d0       	rcall	.+40     	; 0x492 <dbg_putchar>
		dbg_putchar( (uint8_t) (signal_code >> 8) );
 46a:	80 91 62 00 	lds	r24, 0x0062
 46e:	90 91 63 00 	lds	r25, 0x0063
 472:	a0 91 64 00 	lds	r26, 0x0064
 476:	b0 91 65 00 	lds	r27, 0x0065
 47a:	89 2f       	mov	r24, r25
 47c:	9a 2f       	mov	r25, r26
 47e:	ab 2f       	mov	r26, r27
 480:	bb 27       	eor	r27, r27
 482:	07 d0       	rcall	.+14     	; 0x492 <dbg_putchar>
		dbg_putchar( (uint8_t) (signal_code >> 16) );
 484:	80 91 64 00 	lds	r24, 0x0064
 488:	04 d0       	rcall	.+8      	; 0x492 <dbg_putchar>
		dbg_putchar( (uint8_t) (signal_code >> 24) );
 48a:	80 91 65 00 	lds	r24, 0x0065
 48e:	01 d0       	rcall	.+2      	; 0x492 <dbg_putchar>
 490:	a7 ce       	rjmp	.-690    	; 0x1e0 <main+0x4c>

00000492 <dbg_putchar>:
#include "dbg_putchar.h"

#if DBG_UART_ENABLE

void dbg_putchar(uint8_t c)
{
 492:	28 2f       	mov	r18, r24
#define DBG_UART_TX_NUM_ADD_NOP		((F_CPU/DBG_UART_BAUDRATE-16)%4)
	uint8_t sreg;
	uint16_t tmp;
	uint8_t numiter = 10;

	sreg = SREG;
 494:	8f b7       	in	r24, 0x3f	; 63
	cli();
 496:	f8 94       	cli

	asm volatile (
 498:	9a e0       	ldi	r25, 0x0A	; 10
 49a:	e8 b3       	in	r30, 0x18	; 24
 49c:	ee 7f       	andi	r30, 0xFE	; 254
 49e:	e8 bb       	out	0x18, r30	; 24
	...
 4a8:	00 00       	nop
 4aa:	ed ec       	ldi	r30, 0xCD	; 205
 4ac:	f0 e0       	ldi	r31, 0x00	; 0
 4ae:	31 97       	sbiw	r30, 0x01	; 1
 4b0:	f1 f7       	brne	.-4      	; 0x4ae <dbg_putchar+0x1c>
 4b2:	00 00       	nop
 4b4:	e8 b3       	in	r30, 0x18	; 24
 4b6:	20 fd       	sbrc	r18, 0
 4b8:	e1 60       	ori	r30, 0x01	; 1
 4ba:	20 ff       	sbrs	r18, 0
 4bc:	ee 7f       	andi	r30, 0xFE	; 254
 4be:	e8 bb       	out	0x18, r30	; 24
 4c0:	08 94       	sec
 4c2:	27 95       	ror	r18
 4c4:	9a 95       	dec	r25
 4c6:	89 f7       	brne	.-30     	; 0x4aa <dbg_putchar+0x18>
		  "M" (1<<DBG_UART_TX_PIN),
		  "i" (DBG_UART_TX_NUM_DELAY_CYCLES),
		  "1" (c),			/* data */
		  "2" (numiter)
	);
	SREG = sreg;
 4c8:	8f bf       	out	0x3f, r24	; 63
}
 4ca:	08 95       	ret

000004cc <_exit>:
 4cc:	f8 94       	cli

000004ce <__stop_program>:
 4ce:	ff cf       	rjmp	.-2      	; 0x4ce <__stop_program>
